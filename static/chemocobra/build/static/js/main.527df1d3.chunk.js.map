{"version":3,"sources":["metabolic-app/app-context.js","metabolic-app/components/ModelTable.js","metabolic-app/components/ModelDescription.js","metabolic-app/components/ScenElement.js","metabolic-app/components/ScenOptions.js","metabolic-app/components/Navbar.js","metabolic-app/api-calls.js","metabolic-app/components/ReactionResults.js","metabolic-app/components/MetaboliteResults.js","metabolic-app/components/MetabolicMap.js","metabolic-app/MetabolicApp.js","serviceWorker.js","index.js"],"names":["React","createContext","ModelTable","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","editingReactionId","inputRefUpperBound","createRef","inputRefLowerBound","reaction","setState","id","lowerBound","current","value","upperBound","isNaN","Number","lower_bound","upper_bound","context","addModifReactionToScen","selScenId","getSelScen","modifReacts","removeModifReactionToScen","original","react_default","a","createElement","type","ref","defaultValue","tableScen","style","color","fontWeight","onClick","saveEditingReaction","bind","setEditingReaction","cursor","columns","Header","createNewScen","accessor","width","Cell","cellFunctionLowerLimit","filterable","sortable","cellFunctionUpperLimit","cellFunctionEditLimits","dataTable","modelId","baseModelId","getModel","reactions","es","className","data","defaultPageSize","pageSizeOptions","noDataText","defaultFilterMethod","filter","row","column","pivotId","undefined","String","toLowerCase","includes","Component","contextType","AppContext","ModelDescription","newScenId","newScenBaseModelId","newScenObjectiveReaction","editingScen","_","prevState","model","getObjectiveReaction","scen","getScen","getObjectiveReactionScen","e","target","loadModel","newScen","objective","baseModelName","allModelIds","addScen","setSelScenId","setCreateNewScen","removeScen","_this2","objectiveId","newScenObjectiveId","objReaction","Autocomplete","options","getOptionLabel","concat","name","renderInput","params","TextField","assign","label","variant","fullWidth","onChange","val","minWidth","disabled","disableClearable","secondForm","FormControl","FormLabel","component","RadioGroup","handleChangeBaseModelId","keys","map","mapId","FormControlLabel","control","Radio","key","handleChangeScenId","title","buttonSave","Button","length","handleSaveButton","startIcon","Save_default","clearButton","Delete_default","handleClearButton","handleAddScenario","AddCircleOutline_default","fontSize","ModelTable_ModelTable","ScenElement","modifReactsScen","reactId","handleClick","ScenOptions","allScenElements","allScens","metabolic_app_components_ScenElement","Navbar","switchButtonText","page","switchMainPage","apiURL","runFVAforReaction","_x","_x2","_x3","_x4","_runFVAforReaction","apply","arguments","_callee","respfba","fractionOptimum","promises","result","result2","regenerator_default","wrap","_context","prev","next","fetch","scenAsParams","then","response","json","catch","console","log","Promise","all","sent","res","counter","min","toFixed","pFBA","max","abrupt","stop","getAvailableModels","_getAvailableModels","_callee2","availableModels","_context2","getAvailableMaps","_getAvailableMaps","_callee3","availableMaps","_context3","runpFBA","_x5","_runpFBA","_callee4","addr","_context4","join","getMapFromId","_x6","_getMapFromId","_callee5","mapOut","_context5","getModelFromId","_x7","_getModelFromId","_callee6","addReactionString","modelOut","_args6","_context6","newReactions","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","reactionString","reactionToString","push","err","return","reactants","products","arrow","m_id","metabolites","ReactionResults","fractOptimum","correctFractOpt","inputfractOptimum","dataFVA","tab","selReaction","r","runFVA","apiCalls","resFVA","correct","number","getReactionsIds","rId","content","gene_reaction_rule","components","getReactions","handleReactionChange","handleChangeTab","defaultChecked","MetaboliteResults","structSVG","selMetabolite","selMetaboliteId","imgURL","text","Fragment","formula","handleClickMNX","MNX","dangerouslySetInnerHTML","__html","metBal","getMetaboliteBalance","getMetabolites","metabolite","handleMetaboliteChange","MetabolicMap","selMapId","selMap","escherBuilder","loadEscher","changeMapEscher","reactionData","load_map","set_reaction_data","document","querySelector","window","escher","Builder","never_ask_before_quit","reaction_scale","size","enable_keys","enable_search","allMapIds","indexOf","split","mapOptions","getMapsSelScen","scenOptions","handleScenChange","handleMapChange","App","bool","selScen","idxScen","newAllScens","toConsumableArray","allModels","metId","thr","reactsTotalFlux","metBalAllScens","_loop","forEach","flux","Math","abs","sort","x","y","metBalR","slice","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_this3","modelIds","Array","from","Set","metabolitesModel","m","_this4","metaboliteIds","newMetabolites","b","localeCompare","metaboliteId","_this5","metaboliteOut","_this6","reactOut","react","_this7","reactionsModel","_this8","reactionIds","scenId","reactionId","objectSpread","s","scenOut","appContext","getReactionFromId","getMetaboliteIds","getMetaboliteFromId","metabolic_app_components_Navbar","metabolic_app_components_ModelDescription","metabolic_app_components_ScenOptions","CircularProgress","ReactionResults_ReactionResults","MetaboliteResults_MetaboliteResults","MetabolicMap_MetabolicMap","app_context","Provider","Boolean","location","hostname","match","ReactDOM","render","metabolic_app_MetabolicApp","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.527df1d3.chunk.js","sourcesContent":["import React from 'react';\n\nexport default React.createContext({});\n\n\n\n\n","import React, { Component } from 'react';\nimport ReactTable from 'react-table';\nimport AppContext from '../app-context';\n\nexport default class ModelTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editingReactionId: '',\n    }\n    this.inputRefUpperBound = React.createRef();\n    this.inputRefLowerBound = React.createRef();\n  }\n  static contextType = AppContext;\n\n  setEditingReaction(reaction) {\n    this.setState({\n      editingReactionId: reaction.id,\n    })\n  }\n\n  saveEditingReaction(reaction) {\n    let lowerBound = this.inputRefLowerBound.current.value;\n    let upperBound = this.inputRefUpperBound.current.value;\n    if (!isNaN(lowerBound) && !isNaN(upperBound)) {\n      lowerBound = Number(lowerBound);\n      upperBound = Number(upperBound);\n      if (lowerBound !== reaction.lower_bound || upperBound !== reaction.upper_bound) {\n        this.context.addModifReactionToScen(this.context.selScenId, reaction.id, lowerBound, upperBound);\n      }\n      else if (reaction.id in this.context.getSelScen().modifReacts) {\n        this.context.removeModifReactionToScen(this.context.selScenId, reaction.id)\n      }\n    }\n    this.setState({ editingReactionId: '' });\n  }\n\n  cellFunctionLowerLimit(props) {\n    // if reaction is being edited\n    if (props.original.id === this.state.editingReactionId) {\n      return (\n        <input\n          type=\"text\"\n          ref={this.inputRefLowerBound}\n          defaultValue={props.original.lower_bound}\n        />\n      )\n    }\n    // if reaction was edited\n    else if (props.original.id in this.props.tableScen.modifReacts) {\n      return (\n        <span style={{ color: 'red', fontWeight: 'bold' }}>\n          {this.props.tableScen.modifReacts[props.original.id][0]}\n        </span>\n      )\n    }\n    // normal reaction        \n    else return props.original.lower_bound;\n  }\n\n  cellFunctionUpperLimit(props) {\n\n    // if reaction is being edited\n    if (props.original.id === this.state.editingReactionId) {\n      return (\n        <input\n          type=\"text\"\n          ref={this.inputRefUpperBound}\n          defaultValue={props.original.upper_bound}\n        />\n      )\n    }\n    // if reaction was edited\n    else if (props.original.id in this.props.tableScen.modifReacts) {\n      return (\n        <span style={{ color: 'red', fontWeight: 'bold' }}>\n          {this.props.tableScen.modifReacts[props.original.id][1]}\n        </span>\n      )\n    }\n\n    else return props.original.upper_bound;\n  }\n\n  cellFunctionEditLimits(props) {\n    if (this.context.getSelScen() === this.props.tableScen) {\n      if (props.original.id === this.state.editingReactionId) {\n        return (\n          <div\n            id=\"save-button\"\n            onClick={this.saveEditingReaction.bind(this, props.original)}\n          > Save\n          </div>\n        )\n      }\n      else {\n        return (\n          <div\n            id=\"edit-button\"\n            onClick={this.setEditingReaction.bind(this, props.original)}\n            style={{cursor: \"pointer\"}}\n          > Edit\n              </div>\n        )\n      };\n    }\n    else return \"\"\n  }\n\n  render() {\n    // Creation of columns for table\n    const columns = [\n      {\n        Header: this.context.createNewScen ? \"Save Scenario to modify flux limits\" : 'Explore and edit reaction flux limits',\n        columns: [\n          { Header: 'ID', accessor: 'id', width: 80, style: { fontWeight: 'bold' } },\n          { Header: 'Name', accessor: 'name' },\n          { Header: 'Reaction', accessor: 'reactionString' },\n          { Header: 'Genes', accessor: 'gene_reaction_rule' },\n        ]\n      },\n      {\n        Header: 'Limits',\n        columns: [\n          {\n            Header: 'Lower', Cell: this.cellFunctionLowerLimit.bind(this), width: 50, filterable: false, sortable: false\n          },\n          {\n            Header: 'Upper', Cell: this.cellFunctionUpperLimit.bind(this), width: 50, filterable: false, sortable: false\n          },\n          {\n            Header: 'Edit', Cell: this.cellFunctionEditLimits.bind(this), filterable: false, sortable: false, width: 50\n          },\n        ]\n      }\n    ];\n    // Define data for table\n    let dataTable = [];\n    let modelId = this.props.tableScen.baseModelId\n    if (modelId !== \"\" && this.context.getModel(modelId)) {\n      dataTable = this.context.getModel(this.props.tableScen.baseModelId).reactions;\n    }\n\n    return (\n      <ReactTable\n        className=\"-striped -highlight\"\n        data={dataTable}\n        columns={columns}\n        filterable\n        defaultPageSize={10}\n        pageSizeOptions={[10,15,20]}\n        noDataText={\"Please Choose a Model Above\"}\n        defaultFilterMethod={(filter, row, column) => {\n          const id = filter.pivotId || filter.id;\n          return row[id] !== undefined ? String(row[id]).toLowerCase().includes(filter.value.toLowerCase()) : false;\n        }}\n      />\n    )\n  }\n}","import React, { Component } from 'react';\nimport AppContext from '../app-context';\nimport './ModelDescription.css';\nimport \"react-table/react-table.css\";\nimport ModelTable from './ModelTable';\nimport TextField from '@material-ui/core/TextField';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport Radio from '@material-ui/core/Radio';\nimport FormControl from '@material-ui/core/FormControl';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport Button from '@material-ui/core/Button';\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport SaveIcon from '@material-ui/icons/Save';\n\nclass ModelDescription extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      // Creation of a new scen\n      newScenId: \"\",\n      newScenBaseModelId: \"\",\n      newScenObjectiveReaction: null,\n      // Choose an existing scenario\n      editingScen: null,\n    }\n  }\n  static contextType = AppContext;\n\n  // **************************************\n  // Lifecycle Compontents\n  // **************************************\n\n  componentDidUpdate(_, prevState) {\n    // Deal with objective reaction when base model changes\n    const modelChanged = prevState.newScenBaseModelId !== this.state.newScenBaseModelId;\n    if (modelChanged) {\n      this.setState({ newScenObjectiveReaction: null });\n    }\n\n    if (this.state.newScenObjectiveReaction === null && this.state.newScenBaseModelId !== \"\") {\n      const model = this.context.getModel(this.state.newScenBaseModelId)\n      if (model) {\n        this.setState({ newScenObjectiveReaction: this.context.getObjectiveReaction(model) });\n      }\n    }\n\n    // If editing a scenario, at the beginning change values in form\n    if (this.context.createNewScen && this.state.editingScen !== null) {\n      this.setState({ editingScen: null });\n    }\n    else if (!(this.context.createNewScen)) {\n      if (this.state.editingScen === null || this.state.editingScen.id !== this.context.selScenId) {\n        const scen = this.context.getScen(this.context.selScenId);\n        this.setState({\n          editingScen: scen,\n          newScenId: scen.id,\n          newScenBaseModelId: scen.baseModelId,\n          newScenObjectiveReaction: this.context.getObjectiveReactionScen(scen),\n        });\n      }\n    }\n\n\n\n  }\n\n\n\n  // **************************************\n  // Functions \n  // **************************************\n  // handleChangeCreateScen(e) {\n  //   this.setState({createNewScen: !this.state.createNewScen});\n  // }\n  handleChangeScenId(e) {\n    this.setState({ newScenId: e.target.value });\n  }\n\n  async handleChangeBaseModelId(e) {\n    this.setState({ newScenBaseModelId: e.target.value });\n    if (e.target.value !== \"\") this.context.loadModel(e.target.value);\n  }\n\n  handleSaveButton() {\n    // Create new scen and add it to context.allScens\n    // set newScen as new selScen.\n\n    let newScen = {\n      id: this.state.newScenId,\n      modifReacts: [],\n      objective: this.state.newScenObjectiveReaction.id,\n      baseModelId: this.state.newScenBaseModelId,\n      baseModelName: this.context.allModelIds[this.state.newScenBaseModelId]\n    };\n    this.context.addScen(newScen);\n    this.context.setSelScenId(this.state.newScenId);\n    this.context.setCreateNewScen(false);\n\n  }\n\n  handleAddScenario() {\n    this.setState({\n      newScenId: '',\n      newScenBaseModelId: '',\n      newScenObjectiveReaction: null,\n    });\n    this.context.setCreateNewScen(true);\n  }\n\n  handleClearButton(){\n    this.context.removeScen(this.context.getSelScen());\n    this.context.setCreateNewScen(true);\n    this.setState({\n      newScenId: \"\",\n      newScenBaseModelId: \"\",\n      newScenObjectiveReaction: null,\n      // Choose an existing scenario\n      editingScen: null,\n    })\n  }\n\n\n\n\n  // ***************************************\n  render() {\n    // Create scen for table\n    let tableScen = {};\n    if (this.context.createNewScen) {\n      tableScen = {\n        id: this.state.newScenId,\n        baseModelId: this.state.newScenBaseModelId,\n        objectiveId: this.state.newScenObjectiveId,\n        modifReacts: [],\n      }\n    }\n    else {\n      tableScen = this.context.getSelScen();\n    }\n\n    // Add autocomplete reaction only if model is loaded\n    let objReaction = null;\n    const model = this.context.getModel(this.state.newScenBaseModelId);\n    if (this.state.newScenObjectiveId !== \"\" && model) {\n      objReaction = (\n        <Autocomplete\n          id=\"objective-reaction\"\n          options={model.reactions}\n          getOptionLabel={reaction => `${reaction.id}: ${reaction.name}`}\n          renderInput={params => (<TextField {...params} label=\"Objective Function\" variant=\"outlined\" fullWidth />)}\n          value={this.state.newScenObjectiveReaction}\n          onChange={(_, val) => this.setState({ newScenObjectiveReaction: val })}\n          style={{ minWidth: 400 }}\n          disabled={!(this.context.createNewScen)}\n          disableClearable={true}\n        />\n      );\n    }\n\n\n\n    const secondForm = (\n      <form>\n        {/* Base Model */}\n        <FormControl\n            disabled={!(this.context.createNewScen)}\n        \n        >\n          <FormLabel component=\"legend\">Please Choose a Model</FormLabel>\n          <RadioGroup\n            value={this.state.newScenBaseModelId}\n            onChange={this.handleChangeBaseModelId.bind(this)}\n          >\n            {Object.keys(this.context.allModelIds).map(mapId => (\n              <FormControlLabel\n                value={mapId}\n                control={<Radio />}\n                label={`${mapId} - ${this.context.allModelIds[mapId]}`}\n                key={mapId}\n              />\n            ))}\n          </RadioGroup>\n        </FormControl>\n\n        {/* Scenario Name */}\n        <TextField\n          variant=\"outlined\"\n          id=\"scenario-name\"\n          label=\"  Scenario Name / Id\"\n          value={this.state.newScenId}\n          onChange={this.handleChangeScenId.bind(this)}\n          style={{ minWidth: 400 }}\n          disabled={!(this.context.createNewScen)}\n        />\n        {/* Objective Function */}\n        {objReaction}\n      </form>\n    );\n\n    const title = (\n      <div id=\"title\">\n        {this.context.createNewScen ?\n          `Create new scenario ${this.state.newScenId}` :\n          `Edit Scenario: ${this.context.selScenId}`}\n      </div>\n    );\n\n    const buttonSave = this.context.createNewScen ?\n      (\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          id=\"save-button\"\n          disabled={this.state.newScenId.length === 0 || this.state.newScenBaseModelId.length === 0}\n          onClick={this.handleSaveButton.bind(this)}\n          startIcon={<SaveIcon />}\n        >\n          Save\n        </Button>\n      ) : null;\n\n    const clearButton = this.context.createNewScen ? null :\n      (\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          id=\"clear-button\"\n          startIcon={<DeleteIcon />}\n          onClick={this.handleClearButton.bind(this)}\n        >\n          Delete\n        </Button>\n      );\n\n\n\n    return (\n      <div id=\"ModelDescription\">\n        <div className=\"first-line\">\n          {title}\n          <div id=\"add-scenario\" onClick={this.handleAddScenario.bind(this)}>\n            <AddCircleOutlineIcon fontSize=\"large\" />\n            Add Scenario\n        </div>\n        </div>\n        {secondForm}\n\n        <div id=\"buttons\">\n          {buttonSave}\n          {clearButton}\n\n\n        </div>\n\n        <div id=\"model-table\">\n          <ModelTable\n            tableScen={tableScen}\n          />\n        </div>\n\n\n      </div>\n    );\n\n  }\n}\n\nexport default ModelDescription;","import React, { Component } from \"react\";\nimport \"./ScenElement.css\";\nimport AppContext from \"../app-context\";\nimport PT from \"prop-types\";\n\nclass ScenElement extends Component {\n  static contextType = AppContext;\n\n  static propTypes = {\n    scen: PT.object.isRequired,\n  }\n\n  handleClick() {\n    if (this.context.selScenId !== this.props.scen.id) {\n      this.context.setSelScenId(this.props.scen.id);\n      this.context.setCreateNewScen(false);\n    }\n  }\n\n  render() {\n    // modified reactions\n    let modifReactsScen = Object.keys(this.props.scen.modifReacts).map(reactId => (\n      <div key={reactId} className=\"modif-reaction\">\n        <strong>{reactId}</strong> : {this.props.scen.modifReacts[reactId][0]} / {this.props.scen.modifReacts[reactId][1]}\n      </div>\n    ));\n\n    return (\n      <div \n        id=\"ScenElement\" \n        className={this.context.selScenId === this.props.scen.id ? \"selected\" : null}\n        onClick={this.handleClick.bind(this)}\n      >\n        <div id=\"scen-element-title\">\n          {this.props.scen.id}\n        </div>\n\n\n        <div id=\"scen-element-model\">\n          <span style={{ fontWeight: \"bold\" }}>Model Id:</span> {this.props.scen.baseModelId}\n        </div>\n        <div id=\"scen-element-organism\">\n          <span style={{ fontWeight: \"bold\" }}>Organism:</span> {this.props.scen.baseModelName}\n        </div>\n        <div id=\"scen-element-objective\">\n          <span style={{ fontWeight: \"bold\" }}>Objective:</span> {this.props.scen.objective}\n        </div>\n        <div id=\"scen-element-reactions\">\n          <span style={{ fontWeight: \"bold\" }}>Modified Reactions:</span>\n        </div>\n        {modifReactsScen}\n      </div>\n    );\n  }\n}\n\nexport default ScenElement;","import React, { Component } from 'react';\nimport './ScenOptions.css';\nimport AppContext from '../app-context';\nimport ScenElement from './ScenElement';\n\n\nclass ScenOptions extends Component {\n  static contextType = AppContext;\n\n  render() {\n    // Create Scen Elements\n    let allScenElements = this.context.allScens.map(scen => (\n      <ScenElement\n        key={scen.id}\n        scen={scen}\n      />\n    ))\n\n    return (\n      <div id=\"ScenOptions\">\n        <div id=\"scen-options-title\">\n          List Scenarios\n        </div>\n        <div id=\"scen-options-elements\">\n          {allScenElements}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ScenOptions;","import React, { Component } from 'react';\nimport './Navbar.css';\nimport AppContext from '../app-context';\n\nclass Navbar extends Component {\n  static contextType = AppContext;\n\n  render() {\n    // switchButtonText\n    let switchButtonText;\n    if (this.context.page==='options') {\n      switchButtonText = 'Run Model'\n    }\n    else {\n      switchButtonText = 'Options'\n    }\n  \n    return(\n      <div id=\"Navbar\">\n        <div id=\"Navbar-switch-button\">\n          <button \n            onClick={this.context.switchMainPage} \n            disabled={this.context.allScens.length===0}>\n            {switchButtonText}\n          </button>\n        </div>\n        <div id=\"Navbar-title\">\n          Metabolic Modelling\n        </div>\n        <div id=\"Navbar-empty\">\n  \n        </div>\n      </div>\n    )\n\n  }\n\n}\n\nexport default Navbar;\n\n","\nconst apiURL = \"/chemocobra/\";\n\n// Runs FVA for a specific reaction given a list of scenarios\nexport async function runFVAforReaction(reactId, allScens, respfba, fractionOptimum) {\n  let promises = allScens.map((scen) => (\n    fetch(apiURL+`metabolic/run_fva/?${scenAsParams(scen)}&reactId=${reactId}&fractionOpt=${fractionOptimum}`)\n      .then(response=>response.json())\n      .catch(response=>console.log(response))\n    ));\n  let result = await Promise.all(promises)\n  let result2 = result.map((res,counter) => (\n    {\n      scen: allScens[counter].id, \n      min: (res.min|| 0).toFixed(3), \n      pFBA: (respfba[allScens[counter].id][reactId] || 0).toFixed(3),\n      max: (res.max|| 0).toFixed(3),\n    }\n  ));\n\n  return result2;\n}\n\n// Get available maps and models\nexport async function getAvailableModels() {\n  let availableModels = await fetch(apiURL + 'metabolic/see_available_models')\n      .then(response => response.json())\n      .catch(response => console.log(response))\n  return availableModels;\n}\n\nexport async function getAvailableMaps() {\n  let availableMaps = await fetch(apiURL + 'metabolic/see_available_maps')\n      .then(response => response.json())\n      .catch(response => console.log(response))\n  return availableMaps;\n}\n\n// Run pfba and returns result\nexport async function runpFBA(scen) {\n  let addr = apiURL + `metabolic/run_pfba/?${scenAsParams(scen)}`\n  let res = await fetch(addr).then(response=>response.json())\n  return res;\n}\n\n// Converts scen into parameter for API\nfunction scenAsParams(scen) {\n  let addr = `baseModelId=${scen.baseModelId}&objective=${scen.objective}`\n  if (Object.keys(scen.modifReacts).length>0) {\n    let modifReacts = Object.keys(scen.modifReacts).map(reactId => (\n      reactId+'/'+scen.modifReacts[reactId].join('/')\n    )).join(',');\n    addr += `&modifReacts=${modifReacts}`;\n  }\n  return addr;\n}\n\nexport async function getMapFromId(mapId) {\n  let mapOut = await fetch(apiURL + `metabolic/get_map/?id=${mapId}`)\n    .then(response => response.json())\n    .catch(response => console.log(response));\n  return mapOut;\n}\n\nexport async function getModelFromId(modelId,addReactionString=false) {\n  let modelOut = await fetch(apiURL + `metabolic/get_model/?id=${modelId}`)\n    .then(response => response.json())\n    .then(model => {\n      if (addReactionString) {\n        let newReactions = [];\n        for (let reaction of model.reactions) {\n          reaction.reactionString = reactionToString(reaction);\n          newReactions.push(reaction);\n        }\n        model.reactions = newReactions;\n      }\n      return model\n    });\n  return modelOut;  \n}\n\nfunction reactionToString(reaction) {\n  let reactants=[], products=[], arrow='', out='';\n  for (let m_id in reaction.metabolites) {\n    if(reaction.metabolites[m_id]===1) products.push(m_id);\n    else if (reaction.metabolites[m_id]>0) products.push(reaction.metabolites[m_id]+'*'+m_id);\n    else if (reaction.metabolites[m_id]===-1) reactants.push(m_id);\n    else reactants.push((-1*reaction.metabolites[m_id])+'*'+m_id);\n  }\n  if (reaction.lower_bound<0 && reaction.upper_bound>0) arrow = '<==>';\n  else if (reaction.lower_bound>=0 && reaction.upper_bound>0) arrow = '-->';\n  else if (reaction.lower_bound < 0 && reaction.upper_bound<=0) arrow = '<--'\n  else arrow = '=!=';\n  out = `${reactants.join(' + ')} ${arrow} ${products.join(' + ')}`;\n  // console.log(reaction.id, out);\n  return out;\n}\n\n","import React, { Component } from 'react';\nimport './ReactionResults.css';\nimport AppContext from '../app-context';\nimport * as apiCalls from '../api-calls';\nimport { JsonToTable } from 'react-json-to-table';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\n\n\nexport default class ReactionResults extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // selReactionId: 'None',\n      fractOptimum: 0.9,\n      correctFractOpt: true,\n      inputfractOptimum: '0.9',\n      dataFVA: {},\n      tab: 'info', //can be either info or FVA\n      selReaction: {},\n    }\n  }\n  static contextType = AppContext;\n\n  async componentDidMount() {\n    const scen = this.context.getSelScen();\n    const model = this.context.getModel(scen.baseModelId);\n    this.setState({\n      selReaction: model.reactions.filter(r => r.id === scen.objective)[0],\n    });\n    this.runFVA(scen.objective);\n  }\n\n  async runFVA(reactId) {\n    let resFVA = await apiCalls.runFVAforReaction(\n      reactId,\n      this.context.allScens,\n      this.context.respfba,\n      1);\n    this.setState({ dataFVA: resFVA })\n\n  }\n\n  validateFractOpt(e) {\n    // verify if input is correct\n    this.setState({ inputfractOptimum: e.target.value });\n    let correct = !isNaN(e.target.value);\n    if (correct) {\n      let number = Number(e.target.value);\n      correct = correct && number > 0 && number <= 1;\n      if (correct) this.setState({ fractOptimum: number });\n    }\n    this.setState({ correctFractOpt: correct });\n  }\n\n  handleReactionChange(_, val) {\n    console.log(\"handleReactionChange\", val);\n    this.setState({ selReaction: val, dataFVA: {} });\n    this.runFVA(val.id);\n  }\n\n  handleChangeTab(e) {\n    this.setState({ tab: e.target.value });\n  }\n\n  render() {\n    // Creation of reaction options\n    let reactionsList = ['None'].concat(this.context.getReactionsIds());\n    let reactionOptions = reactionsList.map(rId => (\n      <option key={rId}>{rId}</option>\n    ));\n\n    // Reaction\n    let reaction = this.state.selReaction;\n    console.log(\"reaction\", reaction);\n\n    // definition of main content depending on page\n    let content;\n    if (this.state.tab === \"info\") {\n      content = (\n        <div id=\"reaction-infos-table\">\n          <table>\n            <tbody>\n              <tr>\n                <th>Name:</th>\n                <td>{reaction.name}</td>\n              </tr>\n              <tr>\n                <th>Bounds:</th>\n                <td>{reaction.lower_bound} / {reaction.upper_bound}</td>\n              </tr>\n              <tr>\n                <th>Genes:</th>\n                <td>{reaction.gene_reaction_rule}</td>\n              </tr>\n              <tr>\n                <th>Reaction:</th>\n                <td>{reaction.reactionString}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      );\n    }\n    else if (this.state.tab === \"FVA\") {\n\n      content = (\n        <div id='reaction-json-table'>\n          <JsonToTable json={this.state.dataFVA} id=\"reaction-json-table\" />\n        </div>\n      )\n    }\n\n    return (\n      <div id=\"ReactionResults\">\n        <div id=\"reaction-results-title\">\n          Reactions Analysis\n        </div>\n        <div id=\"reaction-results-form\">\n            <Autocomplete\n              id=\"reaction-analysis\"\n              options={this.context.getReactions()}\n              getOptionLabel={reaction => `${reaction.id}: ${reaction.name}`}\n              renderInput={params => (<TextField {...params} label=\"Reaction\" variant=\"outlined\" fullWidth />)}\n              value={this.state.selReaction}\n              onChange={this.handleReactionChange.bind(this)}\n              style={{ minWidth: 350 }}\n              disableClearable={true}\n            />\n        </div>\n        <div id=\"reaction-results-radio\" onChange={this.handleChangeTab.bind(this)}>\n          <input type=\"radio\" value=\"info\" name=\"radio\" defaultChecked={true} /> Infos\n          <input type=\"radio\" value=\"FVA\" name=\"radio\" /> FVA\n        </div>\n        <div id=\"reaction-results-infos\">\n          {content}\n        </div>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport './MetaboliteResults.css';\nimport AppContext from '../app-context';\nimport { JsonToTable } from \"react-json-to-table\";\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport TextField from '@material-ui/core/TextField';\n\nexport default class MetaboliteResults extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      // selMetaboliteId: 'None',\n      tab: 'info', // can be either info or balance\n      // metabolite: {},\n      structSVG: '',\n      selMetabolite: {},\n    }\n  }\n  static contextType = AppContext;\n\n  async componentDidMount() {\n    const scen = this.context.getSelScen();\n    const model = this.context.getModel(scen.baseModelId);\n    this.setState({\n      selMetabolite: model.metabolites[0],\n    });\n  }\n\n  async componentDidUpdate(_, prevState) {\n    // get structure image as svg\n    let metChanged = this.state.selMetabolite.id !== prevState.selMetabolite.id;\n    if (metChanged && this.state.selMetaboliteId !== {}) {\n      let imgURL = `/chemocobra/chemo/get_svg_metabolite/${this.state.selMetabolite.id}`;\n      let structSVG;\n      if (Object.keys(this.state.selMetabolite).length === 0) structSVG = '';\n      else structSVG = await fetch(imgURL).then(response => response.text());\n      this.setState({ structSVG });\n    }\n\n  }\n\n  handleChangeTab(e) {\n    this.setState({ tab: e.target.value });\n  }\n\n  // handleClickMNX(mnx_id) {\n  //   window.open(\"http://www.metanetx.org/chem_info/\"+mnx_id, '_blank');\n  // }\n\n  handleMetaboliteChange(_, val) {\n\n    this.setState({\n      selMetabolite: val,\n    });\n\n\n  }\n\n\n  render() {\n    // Creation of metabolite options\n    // let metaboliteList = ['None'].concat(this.context.getMetaboliteIds());\n    // let metaboliteOptions = metaboliteList.map(mId => (\n    //   <option key={mId}>{mId}</option>\n    // ));\n\n    // Definition of main content depending on page\n    let content;\n    if (this.state.tab === 'info') {\n      content = (\n        <>\n          <div id=\"metabolite-infos-table\">\n            <table>\n              <tbody>\n                <tr>\n                  <th>Name:</th>\n                  <td>{this.state.selMetabolite.name}</td>\n                </tr>\n                <tr>\n                  <th>Formula:</th>\n                  <td>{this.state.selMetabolite.formula}</td>\n                </tr>\n                <tr>\n                  <th>Structure:</th>\n                  <td onClick={_ => this.handleClickMNX(this.state.selMetabolite.MNX)}>{this.state.selMetabolite.MNX}</td>\n                </tr>\n              </tbody>\n            </table>\n          </div>\n          <div id=\"metabolite-structure\" dangerouslySetInnerHTML={{ __html: this.state.structSVG }} />\n        </>\n      );\n    }\n    else if (this.state.tab === 'balance') {\n      let metBal = {};\n      if (this.state.selMetabolite.id) {\n        metBal = this.context.getMetaboliteBalance(this.state.selMetabolite.id, 0);\n      }\n      content = metBal.length > 0 ? \n        <JsonToTable json={metBal} key=\"json-table\" id=\"metabolite-json-table\" /> :\n        <div>No flux regarding this metabolite</div>\n    }\n\n\n\n\n\n\n    return (\n      <div id=\"MetaboliteResults\">\n        <div id=\"metabolite-results-title\">\n          Metabolite Analysis\n        </div>\n        <div id=\"metabolite-results-form\">\n          {/* <label>\n            Metabolite? :\n            <select\n              value={this.state.selMetaboliteId}\n              onChange={this.handleMetaboliteChange.bind(this)}\n            > {metaboliteOptions}\n            </select>\n          </label> */}\n          <Autocomplete\n            id=\"metabolite-analysis\"\n            options={this.context.getMetabolites()}\n            getOptionLabel={metabolite => `${metabolite.id}: ${metabolite.name}`}\n            renderInput={params => (<TextField {...params} label=\"Metabolite\" variant=\"outlined\" fullWidth />)}\n            value={this.state.selMetabolite}\n            onChange={this.handleMetaboliteChange.bind(this)}\n            style={{ minWidth: 350 }}\n            disableClearable={true}\n          />\n        </div>\n        <div id=\"metabolite-results-radio\" onChange={this.handleChangeTab.bind(this)}>\n          <input type=\"radio\" value=\"info\" name=\"metabolite-radio\" defaultChecked={true} /> Infos\n          {/* <input type=\"radio\" value=\"structure\" name=\"metabolite-radio\" /> Structure */}\n          <input type=\"radio\" value=\"balance\" name=\"metabolite-radio\" /> Balance\n        </div>\n        <div id=\"metabolite-results-content\">\n          {content}\n        </div>\n\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport './MetabolicMap.css';\nimport AppContext from '../app-context';\nimport * as apiCalls from '../api-calls';\n\nexport default class MetabolicMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selMapId: 'None',\n      selMap: null,\n    }\n    this.escherBuilder = null;\n  }\n  static contextType = AppContext;\n\n  componentDidMount() {\n   this.loadEscher(\n      this.context.getModel(this.context.getSelScen().baseModelId),\n    );\n\n   this.changeMapEscher(\n      this.context.getSelScen(),\n      this.context.getModel(this.context.getSelScen().baseModelId),\n      this.context.respfba,\n      this.state.selMap,\n    )\n  }\n\n\n  componentDidUpdate() {\n   this.changeMapEscher(\n      this.context.getSelScen(),\n      this.context.getModel(this.context.getSelScen().baseModelId),\n      this.context.respfba,\n      this.state.selMap,\n    )\n  }\n\n  changeMapEscher(scen, model, respfba, selMap) {\n    // Create dictionary with data for escher\n    let reactionData = {}\n    for (let reaction of model.reactions) {\n      if (reaction.id in respfba[scen.id]) {\n        reactionData[reaction.id] = respfba[scen.id][reaction.id];\n      }\n      else {\n        reactionData[reaction.id] = 0;\n      }\n    }\n  \n    if (selMap) {\n      this.escherBuilder.load_map(selMap);\n      this.escherBuilder.set_reaction_data(reactionData);\n    }\n  \n  \n  \n  }\n  \n  loadEscher(model) {\n  \n      // Options for escher\n      let escherOptions = {\n        never_ask_before_quit: true,\n        // reaction_style: ['color', 'size', 'text', 'abs'],\n        reaction_scale: [\n          { type: 'min', color: '#c8c8c8', size: 12 },\n          { type: 'max', color: '#66176d', size: 20 }\n        ],\n        enable_keys: false,\n        enable_search: false,\n        \n      };\n  \n      if (document.querySelector(\"#metabolic-map-escher\")) {\n        // Create escher builder\n        this.escherBuilder = window.escher.Builder(\n          null, // map_data\n          model, // model_data\n          null, // embedded_css\n          document.querySelector(\"#metabolic-map-escher\"), // selection\n          escherOptions, // options\n        );\n      }\n    }\n  \n  clearEscher() {\n    this.escherBuilder = null;\n  }\n\n  async handleMapChange(e) {\n    let selMapId = e.target.value\n    let selMap = {}\n    if (selMapId !== \"None\") {\n      selMap = await apiCalls.getMapFromId(selMapId);\n\n    }\n    else selMap = null;\n    this.setState({ selMapId, selMap });\n  }\n\n  handleScenChange(e) {\n    let scen = this.context.getScen(e.target.value);\n    this.context.setSelScenId(scen.id);\n  }\n\n  getMapsSelScen() {\n    return this.context.allMapIds.filter(mapId => (\n      mapId.indexOf(this.context.getSelScen().baseModelId.split(\"_\")[0])>=0\n    ));\n  }\n\n  render() {\n    // Define select menu for map selection\n    let mapOptions = [(\n      <option key={'None'} value=\"None\">No map</option>\n    )];\n    \n    mapOptions.push(this.getMapsSelScen().map(mapId => (\n      <option key={mapId}>{mapId}</option>\n    )));\n\n    // Define options for scenarios\n    let scenOptions = this.context.allScens.map(scen => (\n      <option key={scen.id}>{scen.id}</option>\n    ));\n\n    return (\n      <div id=\"MetabolicMap\">\n        <div id=\"metabolic-map-form\">\n          <label>\n            Choose Scenario:\n            <select\n              value={this.context.selScenId}\n              onChange={this.handleScenChange.bind(this)}\n            >\n              {scenOptions}\n            </select>\n          </label>\n          <label>\n            Please select a map:\n            <select\n              onChange={this.handleMapChange.bind(this)}\n            >\n              {mapOptions}\n            </select>\n          </label>\n        </div>\n        <div id=\"metabolic-map-escher\">\n          Metabolic Map\n        </div>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport './MetabolicApp.css';\nimport AppContext from './app-context';\nimport ModelDescription from './components/ModelDescription';\nimport ScenOptions from './components/ScenOptions';\nimport Navbar from './components/Navbar'\nimport ReactionResults from './components/ReactionResults'\nimport MetaboliteResults from './components/MetaboliteResults'\nimport MetabolicMap from './components/MetabolicMap'\nimport * as apiCalls from './api-calls';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allModelIds: {}, // Ids of available models\n      allMapIds: [],\n      allScens: [], // All defined scenarios\n      selScenId: '', // selected scenario for plot with escher\n      page: 'options', //can be options or results\n      createNewScen: true, // can be create or edit\n      allModels: [], // All downloaded models\n      respfba: {}, // scen -> object with keys reactions and values object with reactions->flux\n    };\n    // Definition of functions to manage context\n  }\n\n  async componentDidMount() {\n    let allModelIds = await apiCalls.getAvailableModels();\n    let allMapIds = await apiCalls.getAvailableMaps();\n    this.setState({ allModelIds, allMapIds });\n  }\n\n  getObjectiveReactionScen(scen) {\n    const model = this.getModel(scen.baseModelId);\n    return model.reactions.filter(r => r.id === scen.objective)[0];\n  }\n\n\n  getObjectiveReaction(model) {\n    return model.reactions.filter(r => \"objective_coefficient\" in r && r[\"objective_function\"] !== 0)[0];\n  }\n\n  // thr --> sum of absolute values to keep. To be implemented.\n  getMetaboliteBalance(metId, thr) {\n    // metBalAllScens ==> list of objects, each for one scen, containing scenId and all reactions\n    let reactsTotalFlux = {};\n    let metBalAllScens = {};\n    for (let scen of this.state.allScens) {\n      metBalAllScens[scen.id] = {};\n      let model = this.getModel(scen.baseModelId);\n      model.reactions.forEach(r => {\n        if (metId in r.metabolites && r.id in this.state.respfba[scen.id]) {\n          let flux = r.metabolites[metId] * this.state.respfba[scen.id][r.id];\n          metBalAllScens[scen.id][r.id] = +flux.toFixed(2);\n          // add this reaction to reactsTotalFlux\n          if (r.id in reactsTotalFlux) reactsTotalFlux[r.id] += Math.abs(metBalAllScens[scen.id][r.id]);\n          else reactsTotalFlux[r.id] = Math.abs(metBalAllScens[scen.id][r.id]);\n        }\n      });\n    }\n\n    // console.log('metBalAllScens', metBalAllScens);\n\n    // Select reactions ok\n    let reactsOK = Object.keys(reactsTotalFlux).sort((x, y) => reactsTotalFlux[y] - reactsTotalFlux[x]).filter(rId => (\n      (reactsTotalFlux[rId] >= thr)\n    ));\n\n    // metBalReacts ==> list of objects, one for reaction, if sum abs >= thr\n    let metBalReacts = reactsOK.map(rId => {\n      let reaction = (rId.length < 20 ? rId : rId.slice(0, 20) + '...')\n      let metBalR = { reaction }\n      for (let scen of this.state.allScens) {\n        if (rId in metBalAllScens[scen.id]) metBalR[scen.id] = metBalAllScens[scen.id][rId];\n        else metBalR[scen.id] = 0;\n      }\n      return metBalR;\n    })\n\n    // console.log(metBalReacts);\n    return metBalReacts;\n\n    // return metaboliteBalance;\n  }\n\n  // Returns sorted list of metabolites in current models\n  getMetaboliteIds() {\n    let modelIds = this.state.allScens.map(scen => scen.baseModelId);\n    modelIds = Array.from(new Set(modelIds));\n    let metabolites = [];\n    modelIds.forEach(modelId => {\n      let model = this.getModel(modelId)\n      let metabolitesModel = model.metabolites.map(m => m.id);\n      metabolites = metabolites.concat(metabolitesModel);\n    });\n    metabolites = Array.from(new Set(metabolites));\n    metabolites.sort();\n    return metabolites;\n  }\n\n  // Returns sorted list of metabolites in current models\n  getMetabolites() {\n    let modelIds = this.state.allScens.map(scen => scen.baseModelId);\n    modelIds = Array.from(new Set(modelIds));\n    let metabolites = [];\n\n    modelIds.forEach(modelId => {\n      const model = this.getModel(modelId)\n      const metaboliteIds = metabolites.map(m => m.id);\n      const newMetabolites = model.metabolites.filter(m => metaboliteIds.indexOf(m.id) === -1);\n      metabolites = metabolites.concat(newMetabolites);\n    });\n\n    metabolites.sort((a, b) => a.id.localeCompare(b.id));\n    return metabolites;\n  }\n\n\n  // Returns a metabolite object from the first occurence\n  getMetaboliteFromId(metaboliteId) {\n    let modelIds = this.state.allScens.map(scen => scen.baseModelId);\n    modelIds = Array.from(new Set(modelIds));\n    let metaboliteOut = {};\n    modelIds.forEach(modelId => {\n      let model = this.getModel(modelId);\n      let metabolite = model.metabolites.filter(m => m.id === metaboliteId);\n      if (metabolite.length > 0) metaboliteOut = metabolite[0];\n    });\n    return metaboliteOut\n  }\n\n  // Returns a reaction object from the first occurence\n  getReactionFromId(reactId) {\n    let modelIds = this.state.allScens.map(scen => scen.baseModelId);\n    modelIds = Array.from(new Set(modelIds));\n    let reactOut = {};\n    modelIds.forEach(modelId => {\n      let model = this.getModel(modelId);\n      let react = model.reactions.filter(r => r.id === reactId);\n      if (react.length > 0) reactOut = react[0];\n    });\n    return reactOut;\n  }\n\n  // Returns sorted list of reactions in current models\n  getReactionsIds() {\n    let modelIds = this.state.allScens.map(scen => scen.baseModelId);\n    modelIds = Array.from(new Set(modelIds));\n    let reactions = [];\n    modelIds.forEach(modelId => {\n      let model = this.getModel(modelId)\n      let reactionsModel = model.reactions.map(r => r.id);\n      reactions = reactions.concat(reactionsModel);\n    });\n    reactions = Array.from(new Set(reactions));\n    reactions.sort();\n    return reactions;\n  }\n\n  // Returns sorted list of reactions in current models\n  getReactions() {\n    let modelIds = this.state.allScens.map(scen => scen.baseModelId);\n    modelIds = Array.from(new Set(modelIds));\n    let reactions = [];\n\n    modelIds.forEach(modelId => {\n      const model = this.getModel(modelId)\n      const reactionIds = reactions.map(r => r.id);\n      const newReactions = model.reactions.filter(r => reactionIds.indexOf(r.id)===-1);\n      reactions = reactions.concat(newReactions);\n    });\n    \n    reactions.sort((a, b) => a.id.localeCompare(b.id));\n    return reactions;\n  }\n\n  setSelScenId = (selScenId) => {\n    this.setState({ selScenId });\n  }\n\n  setCreateNewScen = bool => this.setState({ createNewScen: bool });\n\n  getSelScen = () => {\n    if (this.state.selScenId !== '') return this.state.allScens.filter(scen => scen.id === this.state.selScenId)[0];\n    else return {};\n  }\n\n  addModifReactionToScen(scenId, reactionId, lowerBound, upperBound) {\n    let scen = Object.assign({}, this.state.allScens.filter(scen => scen.id === scenId)[0]);\n    scen.modifReacts = { ...scen.modifReacts }\n    scen.modifReacts[reactionId] = [lowerBound, upperBound];\n    let allScens = this.state.allScens.map(s => {\n      if (s.id === scen.id) return scen;\n      else return s;\n    })\n    this.setState({ allScens });\n  }\n\n  removeModifReactionToScen(scenId, reactionId) {\n    let scen = Object.assign({}, this.state.allScens.filter(scen => scen.id === scenId)[0]);\n    scen.modifReacts = { ...scen.modifReacts }\n    delete scen.modifReacts[reactionId]\n    let allScens = this.state.allScens.map(s => {\n      if (s.id === scen.id) return scen;\n      else return s;\n    })\n    this.setState({ allScens });\n  }\n\n  addScen = (selScen) => {\n    this.setState(state => {\n      const idxScen = state.allScens.map(scen => scen.id).indexOf(selScen.id);\n      console.log(selScen, idxScen);\n      if (idxScen === -1) {\n        return { allScens: state.allScens.concat([selScen]) };\n      }\n      else {\n        const newAllScens = [...state.allScens];\n        newAllScens[idxScen] = selScen;\n        return { allScens: newAllScens };\n      }\n    })\n  }\n\n  removeScen = (selScen) => {\n    this.setState(state => ({ allScens: state.allScens.filter(scen => scen.id !== selScen.id) }))\n  }\n\n  // returns model if it is already stored\n  getModel(modelId) {\n    let modelOut = this.state.allModels.filter(model => model.id === modelId);\n    if (modelOut.length > 0) return modelOut[0];\n    else return null;\n  }\n\n  getScen(scenId) {\n    let scenOut = this.state.allScens.filter(scen => scen.id === scenId);\n    if (scenOut.length > 0) return scenOut[0];\n    else return null;\n  }\n\n  // Loads model if not already in allModels\n  async loadModel(modelId) {\n    if (!(modelId in this.state.allModels)) {\n      let model = await apiCalls.getModelFromId(modelId, true);\n      let allModels = this.state.allModels.filter(model => model.id !== modelId).concat([model])\n      this.setState({ allModels });\n    }\n  }\n\n  // Switches page options vs results\n  async switchMainPage() {\n    if (this.state.page === 'options') {\n      // change page\n      this.setState({ page: 'results' })\n      // run model\n      let respfba = {};\n      for (let scen of this.state.allScens) {\n        let res = await apiCalls.runpFBA(scen);\n        respfba[scen.id] = res;\n      }\n      this.setState({ respfba });\n    }\n    else {\n      this.setState({ page: 'options', respfba: {} });\n    }\n  }\n\n\n  render() {\n    // Definition of context for provider\n    let appContext = {\n      ...this.state,\n      //variables\n      allModels: this.state.allModels,\n      //functions\n      loadModel: this.loadModel.bind(this),\n      setSelScenId: this.setSelScenId.bind(this),\n      getSelScen: this.getSelScen.bind(this),\n      addScen: this.addScen.bind(this),\n      removeScen: this.removeScen.bind(this),\n      getModel: this.getModel.bind(this),\n      addModifReactionToScen: this.addModifReactionToScen.bind(this),\n      removeModifReactionToScen: this.removeModifReactionToScen.bind(this),\n      switchMainPage: this.switchMainPage.bind(this),\n      getScen: this.getScen.bind(this),\n      getReactionsIds: this.getReactionsIds.bind(this),\n      getReactionFromId: this.getReactionFromId.bind(this),\n      getMetaboliteIds: this.getMetaboliteIds.bind(this),\n      getMetaboliteFromId: this.getMetaboliteFromId.bind(this),\n      getMetaboliteBalance: this.getMetaboliteBalance.bind(this),\n      setCreateNewScen: this.setCreateNewScen.bind(this),\n      getObjectiveReaction: this.getObjectiveReaction.bind(this),\n      getObjectiveReactionScen: this.getObjectiveReactionScen.bind(this),\n      getReactions: this.getReactions.bind(this),\n      getMetabolites: this.getMetabolites.bind(this),\n    }\n\n    // Definition of main content\n    let content;\n    if (this.state.page === 'options') {\n      // window.clearEscher();\n      content = (\n        <div id=\"App\">\n          <Navbar />\n          <div id=\"App-content\">\n            <ModelDescription />\n            <ScenOptions />\n          </div>\n        </div>\n      );\n    }\n\n    else if (this.state.page === 'results' && Object.keys(this.state.respfba).length === 0) {\n      content = (\n        <div id=\"App\">\n          <Navbar />\n          <div id=\"loader\">\n            <div id=\"loader-title\">\n              Running pFBA on models...\n            </div>\n            <CircularProgress />\n\n          </div>\n        </div>\n      );\n    }\n\n    else if (this.state.page === 'results' && Object.keys(this.state.respfba).length === this.state.allScens.length) {\n      content = (\n        <div id=\"App\">\n          <Navbar />\n          <div id=\"App-content\">\n            <div id=\"results-left\">\n              <ReactionResults />\n              <MetaboliteResults />\n            </div>\n            <MetabolicMap />\n          </div>\n        </div>\n      );\n    }\n\n    // For debug !!\n    // content = <ReactionResults />\n\n\n    return (\n      <AppContext.Provider value={appContext}>\n        {content}\n      </AppContext.Provider >\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MetabolicApp from './metabolic-app/MetabolicApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MetabolicApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}