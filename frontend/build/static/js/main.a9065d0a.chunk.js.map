{"version":3,"sources":["metabolic-app/app-context.js","metabolic-app/components/ModelTable.js","metabolic-app/components/ModelDescription.js","metabolic-app/components/ScenElement.js","metabolic-app/components/ScenOptions.js","metabolic-app/components/Navbar.js","metabolic-app/api-calls.js","metabolic-app/components/ReactionResults.js","metabolic-app/components/MetaboliteResults.js","metabolic-app/components/MetabolicMap.js","metabolic-app/MetabolicApp.js","serviceWorker.js","index.js"],"names":["React","createContext","ModelTable","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","editingReactionId","inputRefUpperBound","createRef","inputRefLowerBound","reaction","setState","id","lowerBound","current","value","upperBound","isNaN","Number","lower_bound","upper_bound","context","addModifReactionToScen","selScenId","getSelScen","modifReacts","removeModifReactionToScen","original","react_default","a","createElement","type","ref","defaultValue","tableScen","style","color","fontWeight","onClick","saveEditingReaction","bind","setEditingReaction","columns","Header","accessor","width","Cell","cellFunctionLowerLimit","filterable","sortable","cellFunctionUpperLimit","cellFunctionEditLimits","dataTable","modelId","baseModelId","keys","getModel","length","reactions","es","className","data","defaultPageSize","noDataText","defaultFilterMethod","filter","row","column","pivotId","undefined","String","toLowerCase","includes","Component","contextType","AppContext","ModelDescription","createNewScen","newScenId","newScenBaseModelId","newScenObjectiveId","objectiveOK","chosenScenId","e","target","loadModel","r","newScen","objective","addScen","setSelScenId","_this2","objectiveId","secondForm","formOK","objectiveStyle","backgroundColor","baseModelOptions","key","push","allModelIds","map","mapId","onChange","handleChangeScenId","handleChangeBaseModelId","handleObjectiveChange","disabled","handleSaveButton","scenOptions","allScens","scen","handleChangeCreateScen","checked","ModelTable_ModelTable","ScenElement","isSelected","removeScen","modifReactsScen","reactId","removeDiv","handleRemoveScen","textAlign","ScenOptions","allScenElements","metabolic_app_components_ScenElement","Navbar","switchButtonText","page","switchMainPage","getTracePlotlyFVA","_x","_x2","_x3","_x4","_getTracePlotlyFVA","apply","arguments","_callee","fractionOptimum","respfba","resFVA","trace","regenerator_default","wrap","_context","prev","next","runFVAforReaction","sent","x","y","error_x","symmetric","array","res","arrayminus","mode","marker","size","abrupt","stop","_callee2","promises","result","_context2","fetch","concat","scenAsParams","then","response","json","catch","console","log","Promise","all","getAvailableModels","_getAvailableModels","_callee3","availableModels","_context3","getAvailableMaps","_getAvailableMaps","_callee4","availableMaps","_context4","runpFBA","_x8","_runpFBA","_callee5","addr","_context5","join","getMapFromId","_x9","_getMapFromId","_callee6","mapOut","_context6","getModelFromId","_x10","_getModelFromId","_callee7","addReactionString","modelOut","_args7","_context7","model","newReactions","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","reactionString","reactionToString","err","return","reactants","products","arrow","m_id","metabolites","ReactionResults","selReactionId","fractOptimum","correctFractOpt","inputfractOptimum","traceFVA","tab","plotlyRef","_","prevState","apiCalls","resizeHandler","correct","number","content","reactionOptions","getReactionsIds","rId","getReactionFromId","name","gene_reaction_rule","handleReactionChange","handleChangeTab","defaultChecked","MetaboliteResults","selMetaboliteId","mnx_id","window","open","metaboliteOptions","getMetaboliteIds","mId","metabolite","getMetaboliteFromId","smilesDrawer","SmilesDrawer","Drawer","padding","height","smiles","parse","tree","draw","formula","handleClickMNX","MNX","handleMetaboliteChange","MetabolicMap","selMapId","selMap","escherRef","getScen","mapOptions","allMapIds","reactionData","escher","never_ask_before_quit","reaction_style","set_reaction_data","handleScenChange","handleMapChange","App","selScen","allModels","metId","thr","metBalScen","scenId","forEach","flux","_this3","modelIds","Array","from","Set","metabolitesModel","m","sort","metaboliteId","_this4","metaboliteOut","_this5","reactOut","react","_this6","reactionsModel","reactionId","assign","objectSpread","s","scenOut","appContext","getMetaboliteBalance","metabolic_app_components_Navbar","metabolic_app_components_ModelDescription","metabolic_app_components_ScenOptions","ReactionResults_ReactionResults","MetaboliteResults_MetaboliteResults","MetabolicMap_MetabolicMap","app_context","Provider","Boolean","location","hostname","match","ReactDOM","render","metabolic_app_MetabolicApp","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a9065d0a.chunk.js","sourcesContent":["import React from 'react';\n\nexport default React.createContext({});\n\n\n\n\n","import React, { Component } from 'react';\nimport ReactTable from 'react-table';\nimport AppContext from '../app-context';\n\nexport default class ModelTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editingReactionId: '',\n    }\n    this.inputRefUpperBound = React.createRef();\n    this.inputRefLowerBound = React.createRef();\n  }\n  static contextType = AppContext;\n\n  setEditingReaction(reaction) {\n    this.setState({\n      editingReactionId: reaction.id,\n    })\n  }\n\n  saveEditingReaction(reaction) {\n    let lowerBound = this.inputRefLowerBound.current.value;\n    let upperBound = this.inputRefUpperBound.current.value;\n    if (!isNaN(lowerBound) && !isNaN(upperBound)) {\n      lowerBound = Number(lowerBound);\n      upperBound = Number(upperBound);\n      if (lowerBound !== reaction.lower_bound || upperBound !== reaction.upper_bound) {\n        this.context.addModifReactionToScen(this.context.selScenId, reaction.id, lowerBound, upperBound);\n      }\n      else if (reaction.id in this.context.getSelScen().modifReacts) {\n        this.context.removeModifReactionToScen(this.context.selScenId, reaction.id)\n      }\n    }\n    this.setState({ editingReactionId: '' });\n  }\n\n  cellFunctionLowerLimit(props) {\n    // if reaction is being edited\n    if (props.original.id === this.state.editingReactionId) {\n      return (\n        <input\n          type=\"text\"\n          ref={this.inputRefLowerBound}\n          defaultValue={props.original.lower_bound}\n        />\n      )\n    }\n    // if reaction was edited\n    else if (props.original.id in this.props.tableScen.modifReacts) {\n      return (\n        <span style={{ color: 'red', fontWeight: 'bold' }}>\n          {this.props.tableScen.modifReacts[props.original.id][0]}\n        </span>\n      )\n    }\n    // normal reaction        \n    else return props.original.lower_bound;\n  }\n\n  cellFunctionUpperLimit(props) {\n\n    // if reaction is being edited\n    if (props.original.id === this.state.editingReactionId) {\n      return (\n        <input\n          type=\"text\"\n          ref={this.inputRefUpperBound}\n          defaultValue={props.original.upper_bound}\n        />\n      )\n    }\n    // if reaction was edited\n    else if (props.original.id in this.props.tableScen.modifReacts) {\n      return (\n        <span style={{ color: 'red', fontWeight: 'bold' }}>\n          {this.props.tableScen.modifReacts[props.original.id][1]}\n        </span>\n      )\n    }\n\n    else return props.original.upper_bound;\n  }\n\n  cellFunctionEditLimits(props) {\n    if (this.context.getSelScen() === this.props.tableScen) {\n      if (props.original.id === this.state.editingReactionId) {\n        return (\n          <div\n            id=\"save-button\"\n            onClick={this.saveEditingReaction.bind(this, props.original)}\n          > Save\n          </div>\n        )\n      }\n      else {\n        return (\n          <div\n            id=\"edit-button\"\n            onClick={this.setEditingReaction.bind(this, props.original)}\n          > Edit\n              </div>\n        )\n      };\n    }\n    else return \"\"\n  }\n\n  render() {\n    // Creation of columns for table\n    const columns = [\n      {\n        Header: 'Description',\n        columns: [\n          { Header: 'ID', accessor: 'id', width: 80, style: { fontWeight: 'bold' } },\n          { Header: 'Name', accessor: 'name' },\n          { Header: 'Reaction', accessor: 'reactionString' },\n          { Header: 'Genes', accessor: 'genes_names' },\n        ]\n      },\n      {\n        Header: 'Limits',\n        columns: [\n          {\n            Header: 'Lower', Cell: this.cellFunctionLowerLimit.bind(this), width: 50, filterable: false, sortable: false\n          },\n          {\n            Header: 'Upper', Cell: this.cellFunctionUpperLimit.bind(this), width: 50, filterable: false, sortable: false\n          },\n          {\n            Header: 'Edit', Cell: this.cellFunctionEditLimits.bind(this), filterable: false, sortable: false, width: 50\n          },\n        ]\n      }\n    ];\n    // Define data for table\n    let dataTable = [];\n    let modelId = this.props.tableScen.baseModelId\n    if (modelId !== \"noModel\" && Object.keys(this.context.getModel(modelId).length > 0)) {\n      dataTable = this.context.getModel(this.props.tableScen.baseModelId).reactions;\n    }\n\n    return (\n      <ReactTable\n        className=\"-striped -highlight\"\n        data={dataTable}\n        columns={columns}\n        filterable\n        defaultPageSize={15}\n        noDataText={\"Please Choose a Model Above\"}\n        defaultFilterMethod={(filter, row, column) => {\n          const id = filter.pivotId || filter.id;\n          return row[id] !== undefined ? String(row[id]).toLowerCase().includes(filter.value.toLowerCase()) : false;\n        }}\n      />\n    )\n  }\n}","import React, { Component } from 'react';\nimport AppContext from '../app-context';\nimport './ModelDescription.css';\nimport \"react-table/react-table.css\";\nimport ModelTable from './ModelTable';\n\n\nclass ModelDescription extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      createNewScen: true,\n      // Creation of a new scen\n      newScenId: 'New Scenario', \n      newScenBaseModelId: 'noModel',\n      newScenObjectiveId: '',\n      objectiveOK: false,\n      // Choose an existing scenario\n      chosenScenId: '',\n    }\n  }\n  static contextType = AppContext;\n\n  // **************************************\n  // Lifecycle Compontents\n  // **************************************\n\n  // **************************************\n  // Functions \n  // **************************************\n  // async changeBaseModel(modelId) {\n  //   let baseModel = await this.context.getModel(modelId);\n  //   this.setState({ chosenBaseModel: baseModel });\n  // }\n  handleChangeCreateScen(e) {\n    this.setState({createNewScen: !this.state.createNewScen});\n  }\n  handleChangeScenId(e) {\n    this.setState({newScenId: e.target.value});\n  }\n  async handleChangeBaseModelId(e) {\n    this.setState({ newScenBaseModelId: e.target.value });\n    this.context.loadModel(e.target.value);\n  }\n  handleObjectiveChange(e) {\n    let newScenObjectiveId = e.target.value;\n    let objectiveOK = false;\n    if (this.state.createNewScen && this.state.newScenBaseModelId!==\"noModel\") {\n      objectiveOK = this.context.getModel(this.state.newScenBaseModelId).reactions.filter(r => (\n        r.id === newScenObjectiveId\n      )).length > 0;\n    }\n    this.setState({ newScenObjectiveId, objectiveOK });\n  }\n  handleSaveButton() {\n    // Create new scen and add it to context.allScens\n    // set newScen as new selScen.\n    let newScen = {\n      id: this.state.newScenId,\n      modifReacts: [],\n      objective: this.state.newScenObjectiveId,\n      baseModelId: this.state.newScenBaseModelId,\n    }\n    this.context.addScen(newScen);\n    this.context.setSelScenId(this.state.newScenId);\n    this.setState({createNewScen: false});\n    // Reset state variables\n    this.setState({\n      newScenId: 'New Scenario',\n      newScenBaseModelId: 'noModel',\n      newScenObjectiveId: '',\n      objectiveOK: false,\n    })\n  }\n\n  // ***************************************\n  render() {\n    // Create scen for table\n    let tableScen={};\n    if (this.state.createNewScen) {\n      tableScen = {\n        id: this.state.newScenId,\n        baseModelId: this.state.newScenBaseModelId,\n        objectiveId: this.state.newScenObjectiveId,\n        modifReacts: [],\n      }\n    }\n    else {\n      tableScen = this.context.getSelScen();\n    }\n\n    // Submit Button active only if Base model selected and Objective ok --> verify form\n    let formOK = (this.state.objectiveOK && this.state.newScenBaseModelId !== \"noModel\");\n\n    // If Objective function does not exist, background color is red\n    let objectiveStyle = {};\n    if (!this.state.objectiveOK) objectiveStyle = { backgroundColor: '#fc9b8a' };\n\n\n    let secondForm;\n    // if create new scen --> ask for info for new scen\n    if(this.state.createNewScen) {\n      let baseModelOptions = [(\n        <option value={\"noModel\"} key=\"noModel\">Please Choose a Model</option>\n      )];      \n      baseModelOptions.push(this.context.allModelIds.map(mapId => (\n        <option key={mapId}>{mapId}</option>\n      )));\n      secondForm = (\n        <div id=\"new-scen-form\">\n          <div id=\"new-scen-form-title\">\n            Create Scenario\n          </div>\n          <label>\n            Scenario Name\n            <input\n              type=\"text\"\n              value={this.state.newScenId}\n              onChange={this.handleChangeScenId.bind(this)}\n            />\n          </label>\n          <label>\n            Base Model\n            <select\n              value={this.state.newScenBaseModelId}\n              onChange={this.handleChangeBaseModelId.bind(this)}\n            >\n              {baseModelOptions}\n            </select>\n          </label>\n          <label>\n            Objective\n            <input\n              type=\"text\"\n              value={this.state.newScenObjectiveId}\n              onChange={this.handleObjectiveChange.bind(this)}\n              style={objectiveStyle}\n            />\n          </label>\n          <button\n            disabled={!formOK}\n            onClick={this.handleSaveButton.bind(this)}\n          >\n            Save\n          </button>\n        </div>\n      );      \n    }\n    else {\n      let scenOptions = this.context.allScens.map(scen => (\n        <option key={scen.id}>{scen.id}</option>\n      ))\n      secondForm = (\n        <label>\n          Choose Scenario:\n          <select\n            value={this.context.selScenId}\n            onChange={e => this.context.setSelScenId(e.target.value)}\n          >\n            {scenOptions}\n          </select>\n        </label>\n      )\n    }\n\n    return (\n      <div id=\"ModelDescription\">\n        <div id=\"ModelForm\">\n          <label>\n            Create new Scenario ?\n            <input \n              type=\"checkbox\"\n              value={this.state.createNewScen}\n              onChange={this.handleChangeCreateScen.bind(this)}\n              checked={this.state.createNewScen}\n            />\n          </label>\n          {secondForm}\n        </div>\n\n        <div id=\"model-table\">\n          <ModelTable \n            tableScen={tableScen}\n          />\n        </div>\n      </div>\n    );\n\n  }\n}\n\nexport default ModelDescription;","import React, { Component } from \"react\";\nimport \"./ScenElement.css\";\nimport AppContext from \"../app-context\";\nimport PT from \"prop-types\";\n\nclass ScenElement extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isSelected: true\n    }\n  }\n  static contextType = AppContext;\n\n  static propTypes = {\n    scen: PT.object.isRequired,\n  }\n\n  handleChangeSelected() {\n    this.setState(state => {\n      return {isSelected: !state.isSelected }\n    });\n  }\n  handleRemoveScen() {\n    this.context.removeScen(this.props.scen);\n  }\n\n  render() {\n    // modified reactions\n    let modifReactsScen = Object.keys(this.props.scen.modifReacts).map(reactId => (\n      <li key={reactId}>\n        {reactId}: {this.props.scen.modifReacts[reactId][0]} ==> {this.props.scen.modifReacts[reactId][1]}\n      </li>\n    ));\n\n    // Remove scen only if more than one scen in allscens\n    let removeDiv = <div></div>\n    if (this.context.allScens.length>1) {\n      removeDiv = (\n        <div id=\"scen-element-remove\" onClick={this.handleRemoveScen.bind(this)}>\n            X\n        </div>\n      )\n    }\n    \n    return (\n      <div id=\"ScenElement\">\n        <div id=\"scen-element-first-row\">\n          <div id=\"scen-element-title\">\n            {this.props.scen.id}\n          </div>\n          {removeDiv}\n        </div>\n        <div id=\"scen-element-second-row\">        \n          <div id=\"scen-element-model\">\n            <span style={{fontWeight:\"bold\"}}>Model:</span> {this.props.scen.baseModelId}\n          </div>\n          <div id=\"scen-element-objective\">\n          <span style={{fontWeight:\"bold\"}}>Objective:</span> {this.props.scen.objective}\n          </div>\n        </div>\n        <div id=\"scen-element-reactions\">\n          <span style={{textAlign:\"center\", fontWeight:\"bold\"}}>Modified Reactions:</span>\n          {modifReactsScen}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ScenElement;","import React, { Component } from 'react';\nimport './ScenOptions.css';\nimport AppContext from '../app-context';\nimport ScenElement from './ScenElement';\n\nclass ScenOptions extends Component {\n  static contextType = AppContext;\n\n  render() {\n    // Create Scen Elements\n    let allScenElements = this.context.allScens.map(scen => (\n      <ScenElement\n        key={scen.id}\n        scen={scen}\n      />\n    ))\n\n    return (\n      <div id=\"ScenOptions\">\n      <div id=\"scen-options-title\">\n        List Scenarios\n      </div>\n        <div id=\"scen-options-elements\">\n          {allScenElements}\n        </div>\n      </div>\n    );\n  }\n}\n\n  export default ScenOptions;","import React, { Component } from 'react';\nimport './Navbar.css';\nimport AppContext from '../app-context';\n\nclass Navbar extends Component {\n  static contextType = AppContext;\n\n  render() {\n    // switchButtonText\n    let switchButtonText;\n    if (this.context.page==='options') {\n      switchButtonText = 'Run Model'\n    }\n    else {\n      switchButtonText = 'Options'\n    }\n  \n    return(\n      <div id=\"Navbar\">\n        <div id=\"Navbar-switch-button\">\n          <button \n            onClick={this.context.switchMainPage} \n            disabled={this.context.allScens.length===0}>\n            {switchButtonText}\n          </button>\n        </div>\n        <div id=\"Navbar-title\">\n          Metabolic Modelling\n        </div>\n        <div id=\"Navbar-empty\">\n  \n        </div>\n      </div>\n    )\n\n  }\n\n}\n\nexport default Navbar;\n\n","\nexport async function getTracePlotlyFVA(reactId,allScens,fractionOptimum, respfba) {\n  let resFVA = await runFVAforReaction(reactId,allScens,fractionOptimum);\n  let trace = {\n    x: allScens.map(scen=>respfba[scen.id][reactId] || 0),\n    y: allScens.map(scen=>scen.id),\n    error_x: {\n      type: 'data',\n      symmetric: false,\n      array: resFVA.map(res => res[0]),\n      arrayminus: resFVA.map(res=>res[1])\n    },\n    type: 'scatter',\n    mode: 'markers',\n    marker: { size: 12 },\n  }\n  return [trace];\n}\n\n\n// Runs FVA for a specific reaction given a list of scenarios\nasync function runFVAforReaction(reactId, allScens, fractionOptimum) {\n  let promises = allScens.map((scen) => (\n    fetch(`metabolic/run_fva/?${scenAsParams(scen)}&reactId=${reactId}&fractionOpt=${fractionOptimum}`)\n      .then(response=>response.json())\n      .catch(response=>console.log(response))\n    ));\n  let result = await Promise.all(promises)\n    \n  return result;\n}\n\n// Get available maps and models\nexport async function getAvailableModels() {\n  let availableModels = await fetch('metabolic/see_available_models')\n      .then(response => response.json())\n      .catch(response => console.log(response))\n  return availableModels;\n}\nexport async function getAvailableMaps() {\n  let availableMaps = await fetch('metabolic/see_available_maps')\n      .then(response => response.json())\n      .catch(response => console.log(response))\n  return availableMaps;\n}\n\n// Run pfba and returns result\nexport async function runpFBA(scen) {\n  let addr = `metabolic/run_pfba/?${scenAsParams(scen)}`\n  let res = await fetch(addr).then(response=>response.json())\n  return res;\n}\n\n// Converts scen into parameter for API\nfunction scenAsParams(scen) {\n  let addr = `baseModelId=${scen.baseModelId}&objective=${scen.objective}`\n  if (Object.keys(scen.modifReacts).length>0) {\n    let modifReacts = Object.keys(scen.modifReacts).map(reactId => (\n      reactId+'/'+scen.modifReacts[reactId].join('/')\n    )).join(',');\n    addr += `&modifReacts=${modifReacts}`;\n  }\n  return addr;\n}\n\nexport async function getMapFromId(mapId) {\n  let mapOut = await fetch(`metabolic/get_map/?id=${mapId}`)\n    .then(response => response.json())\n    .catch(response => console.log(response));\n  return mapOut;\n}\n\nexport async function getModelFromId(modelId,addReactionString=false) {\n  let modelOut = await fetch(`metabolic/get_model/?id=${modelId}`)\n    .then(response => response.json())\n    .then(model => {\n      if (addReactionString) {\n        let newReactions = [];\n        for (let reaction of model.reactions) {\n          reaction.reactionString = reactionToString(reaction);\n          newReactions.push(reaction);\n        }\n        model.reactions = newReactions;\n      }\n      return model\n    });\n  return modelOut;  \n}\n\nfunction reactionToString(reaction) {\n  let reactants=[], products=[], arrow='', out='';\n  for (let m_id in reaction.metabolites) {\n    if(reaction.metabolites[m_id]===1) products.push(m_id);\n    else if (reaction.metabolites[m_id]>0) products.push(reaction.metabolites[m_id]+'*'+m_id);\n    else if (reaction.metabolites[m_id]===-1) reactants.push(m_id);\n    else reactants.push((-1*reaction.metabolites[m_id])+'*'+m_id);\n  }\n  if (reaction.lower_bound<0 && reaction.upper_bound>0) arrow = '<==>';\n  else if (reaction.lower_bound>=0 && reaction.upper_bound>0) arrow = '-->';\n  else if (reaction.lower_bound < 0 && reaction.upper_bound<=0) arrow = '<--'\n  else arrow = '=!=';\n  out = `${reactants.join(' + ')} ${arrow} ${products.join(' + ')}`;\n  // console.log(reaction.id, out);\n  return out;\n}\n\n","import React, { Component } from 'react';\nimport './ReactionResults.css';\nimport AppContext from '../app-context';\nimport * as apiCalls from '../api-calls';\n\nexport default class ReactionResults extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selReactionId: 'None',\n      fractOptimum: 0.9,\n      correctFractOpt: true,\n      inputfractOptimum: '0.9',\n      traceFVA: [],\n      tab: 'info', //can be either info or FVA\n    }\n    this.plotlyRef = React.createRef();\n  }\n  static contextType = AppContext;\n\n\n  async componentDidUpdate(_,prevState) {\n    let changeFVA = (prevState.selReactionId !== this.state.selReactionId) ||\n      (prevState.fractOptimum !== this.state.fractOptimum);\n    changeFVA = changeFVA && this.state.selReactionId !== \"None\";\n    \n    if(changeFVA) {\n      let traceFVA = await apiCalls.getTracePlotlyFVA(\n        this.state.selReactionId,\n        this.context.allScens,\n        this.state.fractOptimum,\n        this.context.respfba,\n        );\n      // console.log('traceFVA',traceFVA);\n      this.setState({traceFVA});\n    }\n    // For plotly\n    if (this.plotlyRef.current !== undefined && this.plotlyRef.current !== null) {\n      // console.log('plotylRef',this.plotlyRef)\n      this.plotlyRef.current.resizeHandler();\n    }\n  }\n\n  validateFractOpt(e) {\n    // verify if input is correct\n    this.setState({inputfractOptimum: e.target.value});\n    let correct = !isNaN(e.target.value);\n    if(correct) {\n      let number = Number(e.target.value);\n      correct = correct && number>0 && number <=1;\n      if(correct) this.setState({fractOptimum: number});\n    }\n    this.setState({correctFractOpt: correct});\n  }\n\n  handleReactionChange(e) {\n    this.setState({selReactionId: e.target.value});    \n  }\n\n  handleChangeTab(e) {\n    this.setState({tab: e.target.value});\n  }\n\n  render() {\n    // Creation of reaction options\n    let reactionsList = ['None'].concat(this.context.getReactionsIds());\n    let reactionOptions = reactionsList.map(rId => (\n      <option key={rId}>{rId}</option>\n    ));\n\n    // red background if fract optimum not valid\n    // let styleInput = {}\n    // if (!this.state.correctFractOpt) styleInput = {backgroundColor: 'LightCoral'}\n\n    // Reaction\n    let reaction = this.context.getReactionFromId(this.state.selReactionId);\n\n    // definition of main content depending on page\n    let content;\n    if (this.state.tab === \"info\") {\n      content = (\n        <table>\n          <tbody>\n            <tr>\n              <th>Name:</th>\n              <td>{reaction.name}</td>\n            </tr>\n            <tr>\n              <th>Bounds:</th>\n              <td>{reaction.lower_bound} / {reaction.upper_bound}</td>\n            </tr>\n            <tr>\n              <th>Genes:</th>\n              <td>{reaction.gene_reaction_rule}</td>\n            </tr>\n            <tr>\n              <th>Reaction:</th>\n              <td>{reaction.reactionString}</td>\n            </tr>\n          </tbody>\n        </table>\n      );\n    }\n    else if (this.state.tab === \"FVA\") {\n      content = (\n        <h4>FVA plot here</h4>\n      )\n    }\n\n    return (\n      <div id=\"ReactionResults\">\n        <div id=\"reaction-results-title\">\n          Reactions Analysis\n        </div>\n        <div id=\"reaction-results-form\">\n          <label>\n            Please choose a reaction:\n            <select \n              value={this.state.selReactionId}\n              onChange={this.handleReactionChange.bind(this)}\n            >{reactionOptions}\n            </select>\n          </label>\n          {/* <label>\n            Fraction of Optimum:\n            <input\n              type=\"text\"\n              value={this.state.inputfractOptimum} \n              onChange={this.validateFractOpt.bind(this)}\n              style={styleInput}\n            />\n          </label> */}\n        </div>\n        <div id=\"reaction-results-radio\" onChange={this.handleChangeTab.bind(this)}>\n          <input type=\"radio\" value=\"info\" name=\"radio\" defaultChecked={true}/> Infos\n          <input type=\"radio\" value=\"FVA\" name=\"radio\"/> FVA\n        </div>\n        <div id=\"reaction-results-infos\">\n          {content}\n        </div>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport './MetaboliteResults.css';\nimport AppContext from '../app-context';\nimport SmilesDrawer from 'smiles-drawer';\nimport ReactTable from 'react-table';\n\nexport default class MetaboliteResults extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selMetaboliteId: 'None',\n      tab: 'info', // can be either info or balance\n    }\n  }\n  static contextType = AppContext;\n\n\n  handleChangeTab(e) {\n    this.setState({tab: e.target.value});\n  }\n\n  handleClickMNX(mnx_id) {\n    window.open(\"http://www.metanetx.org/chem_info/\"+mnx_id, '_blank');\n  }\n\n  handleMetaboliteChange(e) {\n    this.setState({selMetaboliteId: e.target.value});\n  }\n\n  \n  render() {\n    // Creation of metabolite options\n    let metaboliteList = ['None'].concat(this.context.getMetaboliteIds());\n    let metaboliteOptions = metaboliteList.map(mId => (\n      <option key={mId}>{mId}</option>\n    ));\n\n    // Metabolite chosen\n    let metabolite = this.context.getMetaboliteFromId(this.state.selMetaboliteId);\n\n    // Definition of main content depending on page\n    let content;\n    let styleCanvasStruct = {}\n    if (this.state.tab === 'info') {\n      // Plot metabolite structure if SMILES available\n      let structOptions = {\n        padding: 10,\n        width: 300,\n        height: 300,\n      }\n      let smilesDrawer = new SmilesDrawer.Drawer(structOptions);\n      if('smiles' in metabolite && metabolite.smiles.length>1) {\n        SmilesDrawer.parse(metabolite.smiles, function(tree) {\n          smilesDrawer.draw(tree, 'metabolite-results-structure-canvas')\n        }, function(err){\n          console.log('error drawing mol', err);\n        })\n      }\n      content = (\n        <table>\n          <tbody>\n            <tr>\n              <th>Name:</th>\n              <td>{metabolite.name}</td>\n            </tr>\n            <tr>\n              <th>Formula:</th>\n              <td>{metabolite.formula}</td>\n            </tr>\n            <tr>\n              <th>MetaNetX:</th>\n              <td onClick={_ => this.handleClickMNX(metabolite.MNX)}>{metabolite.MNX}</td>\n            </tr>\n          </tbody>\n        </table>\n      );\n    }\n    else if (this.state.tab === 'balance') {\n      // styleCanvasStruct = {display: 'none'};\n      // let data = {};\n      // if (this.state.selMetaboliteId!==\"None\") {\n      //   let data = this.context.getMetaboliteBalance(this.context.selMetaboliteId,0);\n      // }\n      // let columns = [\n      //   {\n      //     Header: 'Reactions',\n      //     columns: [\n      //       { Header: 'ID', accessor: }\n      //     ]\n      //   }\n      //   {\n      //     Header: 'Scenarios',\n      //     columns: this.context.allScens.map(scen => ({\n      //       Header: scen.id\n      //     }));\n      //   }\n      // ]\n      content = (\n        <h4>Balance Here</h4>\n      )\n    }\n\n    \n\n    return (\n      <div id=\"MetaboliteResults\">\n        <div id=\"metabolite-results-title\">\n          Metabolite Analysis\n        </div>\n        <div id=\"metabolite-results-form\">\n          <label>\n            Please choose a metabolite:\n            <select\n              value={this.state.selMetaboliteId}\n              onChange={this.handleMetaboliteChange.bind(this)}\n            > {metaboliteOptions}\n            </select>\n          </label>\n        </div>\n        <div id=\"metabolite-results-radio\" onChange={this.handleChangeTab.bind(this)}>\n          <input type=\"radio\" value=\"info\" name=\"metabolite-radio\" defaultChecked={true}/> Infos\n          <input type=\"radio\" value=\"balance\" name=\"metabolite-radio\"/> Balance\n        </div>\n        <div id=\"metabolite-results-content\">\n          {content}\n        </div>\n        <div id=\"metabolite-results-structure\" \n          style={styleCanvasStruct}\n        >\n          <canvas id=\"metabolite-results-structure-canvas\">\n          </canvas>\n        </div>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport './MetabolicMap.css';\nimport AppContext from '../app-context';\nimport * as apiCalls from '../api-calls';\nimport * as escher from 'escher-vis';\nimport './builder.css';\n// import escher from './escher';\n\nexport default class MetabolicMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selMapId: 'None',\n      selMap: [],\n    }\n    this.escherRef = React.createRef();\n  } \n  static contextType = AppContext;\n\n  async handleMapChange(e) {\n    let selMapId = e.target.value\n    let selMap = {}\n    if (selMapId!==\"None\"){\n      selMap = await apiCalls.getMapFromId(selMapId);\n      \n    }\n    this.setState({selMapId, selMap});\n  }\n\n  handleScenChange(e) {\n    let scen = this.context.getScen(e.target.value)\n    this.context.setSelScenId(scen.id);\n  }\n  \n  render() {\n    // Define select menu for map selection\n    let mapOptions = [(\n      <option key={'None'}>No map</option>\n    )];\n    mapOptions.push(this.context.allMapIds.map(mapId => (\n      <option key={mapId}>{mapId}</option>\n    )));\n\n    // Define options for scenarios\n    let scenOptions = this.context.allScens.map(scen => (\n      <option key={scen.id}>{scen.id}</option>\n    ));\n\n    // Model\n    let scen = this.context.getSelScen();\n    let model = this.context.getModel(scen.baseModelId);\n\n    // Create dictionary with data for escher\n    let reactionData = {}\n    for (let reaction of model.reactions) {\n      if (reaction.id in this.context.respfba[this.context.selScenId]) {\n        reactionData[reaction.id] = this.context.respfba[this.context.selScenId][reaction.id];\n      }\n      else {\n        reactionData[reaction.id] = 0;\n      }\n    }\n\n    // Escher\n    let escherOptions = {\n      never_ask_before_quit: true,\n      reaction_style: ['color', 'size', 'text', 'abs'],\n    };\n    if (this.state.selMap.length>0) {\n      // Create escher builder\n      let escherBuilder = escher.Builder(\n        this.state.selMap, // map_data\n        model, // model_data\n        null, // embedded_css\n        this.escherRef.current, // selection\n        escherOptions, // options\n      );\n\n      escherBuilder.set_reaction_data([reactionData])\n      \n      // escherBuilder.view_mode();\n    }\n\n    return (\n      <div id=\"MetabolicMap\">\n        <div id=\"metabolic-map-form\">\n          <label>\n            Choose Scenario:\n            <select\n              value={this.context.selScenId}\n              onChange={this.handleScenChange.bind(this)}\n            >\n              {scenOptions}\n            </select>\n          </label>\n          <label>\n            Please select a map: \n            <select\n              onChange={this.handleMapChange.bind(this)}\n            >\n              {mapOptions}\n            </select>\n          </label>\n        </div>\n        <div id=\"metabolic-map-escher\" ref={this.escherRef}>\n          Metabolic Map\n        </div>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport './MetabolicApp.css';\nimport AppContext from './app-context';\nimport ModelDescription from './components/ModelDescription';\nimport ScenOptions from './components/ScenOptions';\nimport Navbar from './components/Navbar'\nimport ReactionResults from './components/ReactionResults'\nimport MetaboliteResults from './components/MetaboliteResults'\nimport MetabolicMap from './components/MetabolicMap'\nimport * as apiCalls from './api-calls';\nimport './components/slack.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allModelIds: [], // Ids of available models\n      allMapIds: [],\n      allScens: [], // All defined scenarios\n      selScenId: '', // selected scenario for plot with escher\n      page: 'options', //can be options or results\n      allModels: [], // All downloaded models\n      respfba:{}, // scen -> object with keys reactions and values object with reactions->flux\n    };    \n    // Definition of functions to manage context\n  }\n\n  async componentDidMount() {\n    let allModelIds = await apiCalls.getAvailableModels();\n    let allMapIds = await apiCalls.getAvailableMaps();\n    this.setState({allModelIds, allMapIds});\n  }\n  // returns list of objects, each for one scen, containing scenId and all reactions\n  // thr --> sum of absolute values to keep. To be implemented.\n  getMetaboliteBalance(metId, thr) {\n    let metaboliteBalance = this.state.allScens.map(scen => {\n      let metBalScen = {scenId: scen.id};\n      let model = this.getModel(scen.baseModelId);\n      model.reactions.forEach(r => {\n        if (metId in r.metabolites && r.id in this.state.respfba[scen.id]) {\n          let flux = r.metabolites[metId]*this.state.respfba[scen.id][r.id];\n          metBalScen[r.id] = flux;\n        }\n      return metBalScen\n      });\n    });\n    return metaboliteBalance;\n  }\n\n  // Returns sorted list of metabolites in current models\n  getMetaboliteIds() {\n    let modelIds = this.state.allScens.map(scen=>scen.baseModelId);\n    modelIds = Array.from(new Set(modelIds));\n    let metabolites = [];\n    modelIds.forEach(modelId => {\n      let model = this.getModel(modelId)\n      let metabolitesModel = model.metabolites.map(m=>m.id);\n      metabolites = metabolites.concat(metabolitesModel);\n    });\n    metabolites = Array.from(new Set(metabolites));\n    metabolites.sort();\n    return metabolites;\n  }\n\n  // Returns a metabolite object from the first occurence\n  getMetaboliteFromId(metaboliteId) {\n    let modelIds = this.state.allScens.map(scen=>scen.baseModelId);\n    modelIds = Array.from(new Set(modelIds));\n    let metaboliteOut = {};\n    modelIds.forEach(modelId => {\n      let model = this.getModel(modelId);\n      let metabolite = model.metabolites.filter(m=>m.id===metaboliteId);\n      if (metabolite.length>0) metaboliteOut = metabolite[0];\n    });\n    return metaboliteOut\n  }\n\n  // Returns a reaction object from the first occurence\n  getReactionFromId(reactId) {\n    let modelIds = this.state.allScens.map(scen=>scen.baseModelId);\n    modelIds = Array.from(new Set(modelIds));\n    let reactOut = {};\n    modelIds.forEach(modelId => {\n      let model = this.getModel(modelId);\n      let react = model.reactions.filter(r=>r.id===reactId);\n      if (react.length>0) reactOut = react[0];\n    });\n    return reactOut;\n  }\n\n  // Returns sorted list of reactions in current models\n  getReactionsIds() {\n    let modelIds = this.state.allScens.map(scen=>scen.baseModelId);\n    modelIds = Array.from(new Set(modelIds));\n    let reactions = [];\n    modelIds.forEach(modelId => {\n      let model = this.getModel(modelId)\n      let reactionsModel = model.reactions.map(r=>r.id);\n      reactions = reactions.concat(reactionsModel);\n    });\n    reactions = Array.from(new Set(reactions));\n    reactions.sort();\n    return reactions;\n  }\n\n  setSelScenId = (selScenId) => {\n    this.setState({ selScenId });\n  }\n  getSelScen = () => {\n    if (this.state.selScenId !== '') return this.state.allScens.filter(scen=>scen.id===this.state.selScenId)[0];\n    else return {};\n  }\n  addModifReactionToScen(scenId,reactionId, lowerBound, upperBound) {\n    let scen = Object.assign({},this.state.allScens.filter(scen=>scen.id===scenId)[0]);\n    scen.modifReacts = {...scen.modifReacts }\n    scen.modifReacts[reactionId] = [lowerBound,upperBound];\n    let allScens = this.state.allScens.map(s => {\n      if(s.id===scen.id) return scen;\n      else return s;\n    })\n    this.setState({allScens});\n  }\n  removeModifReactionToScen(scenId,reactionId) {\n    let scen = Object.assign({},this.state.allScens.filter(scen=>scen.id===scenId)[0]);\n    scen.modifReacts = {...scen.modifReacts }\n    delete scen.modifReacts[reactionId]\n    let allScens = this.state.allScens.map(s => {\n      if(s.id===scen.id) return scen;\n      else return s;\n    })\n    this.setState({allScens});\n  }\n  addScen = (selScen) => {\n    this.setState(state => ({ allScens: state.allScens.filter(scen=>scen.id!==selScen.id).concat([selScen]) }))\n  }\n  removeScen = (selScen) => {\n    this.setState(state => ({ allScens: state.allScens.filter(scen=>scen.id !== selScen.id) }))\n  }\n  // returns model if it is already stored\n  getModel (modelId) {\n    let modelOut = this.state.allModels.filter(model=>model.id===modelId);\n    if (modelOut.length>0) return modelOut[0];\n    else return {}\n  }\n  getScen (scenId) {\n    let scenOut = this.state.allScens.filter(scen=>scen.id===scenId);\n    if (scenOut.length>0) return scenOut[0];\n    else return {}\n  }\n  // Loads model if not already in allModels\n  async loadModel(modelId) {\n    if (!(modelId in this.state.allModels)) {\n      let model = await apiCalls.getModelFromId(modelId,true);\n      let allModels = this.state.allModels.filter(model=>model.id!==modelId).concat([model]) \n      this.setState({allModels});      \n    }\n  }\n  // Switches page options vs results\n  async switchMainPage() {\n    if (this.state.page === 'options') {\n      // change page\n      this.setState({page: 'results'})\n      // run model\n      let respfba = {};\n      for (let scen of this.state.allScens) {\n        let res = await apiCalls.runpFBA(scen);\n        respfba[scen.id] = res;\n      }\n      this.setState({respfba});\n    }\n    else {\n      this.setState({page: 'options', respfba:{}});\n    }\n  }  \n  \n\n  render() {\n    // Definition of context for provider\n    let appContext = {\n      ...this.state,\n      //variables\n      allModels: this.state.allModels,\n      //functions\n      loadModel: this.loadModel.bind(this),\n      setSelScenId: this.setSelScenId.bind(this),\n      getSelScen: this.getSelScen.bind(this),\n      addScen: this.addScen.bind(this),\n      removeScen: this.removeScen.bind(this),\n      getModel: this.getModel.bind(this),\n      addModifReactionToScen: this.addModifReactionToScen.bind(this),\n      removeModifReactionToScen: this.removeModifReactionToScen.bind(this),\n      switchMainPage: this.switchMainPage.bind(this),\n      getScen: this.getScen.bind(this),\n      getReactionsIds: this.getReactionsIds.bind(this),\n      getReactionFromId: this.getReactionFromId.bind(this),\n      getMetaboliteIds: this.getMetaboliteIds.bind(this),\n      getMetaboliteFromId: this.getMetaboliteFromId.bind(this),\n      getMetaboliteBalance: this.getMetaboliteBalance.bind(this),\n    }\n\n    // Definition of main content\n    let content;\n    if (this.state.page === 'options') {\n      content = (\n        <div id=\"App\">\n          <Navbar />\n          <div id=\"App-content\">\n            <ModelDescription />\n            <ScenOptions />\n          </div>\n        </div>\n      );\n    }\n    \n    else if (this.state.page==='results' && Object.keys(this.state.respfba).length===0) {\n      content = (\n        <div id=\"App\">\n          <Navbar />\n          <div id=\"App-content\">\n            <div className=\"slack\">\n              <span className=\"slack-dot slack-dot--a\"></span>\n              <span className=\"slack-dot slack-dot--b\"></span>\n              <span className=\"slack-dot slack-dot--c\"></span>\n              <span className=\"slack-dot slack-dot--d\"></span>\n            </div>            \n          </div>\n        </div>\n      );\n    }\n    \n    else if (this.state.page==='results' && Object.keys(this.state.respfba).length===this.state.allScens.length) {\n      content = (\n        <div id=\"App\">\n          <Navbar />\n          <div id=\"App-content\">\n            <div id=\"results-left\">\n              <ReactionResults />\n              <MetaboliteResults />\n            </div>\n            <MetabolicMap />\n          </div>\n        </div>\n      );\n    }\n\n    // For debug !!\n    // content = <ReactionResults />\n    \n\n    return (\n      <AppContext.Provider value={appContext}>\n        {content}\n      </AppContext.Provider >\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MetabolicApp from './metabolic-app/MetabolicApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MetabolicApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}