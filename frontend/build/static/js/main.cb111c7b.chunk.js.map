{"version":3,"sources":["metabolic-app/app-context.js","metabolic-app/components/ModelTable.js","metabolic-app/components/ModelDescription.js","metabolic-app/components/ScenElement.js","metabolic-app/components/ScenOptions.js","metabolic-app/components/Navbar.js","metabolic-app/api-calls.js","metabolic-app/components/ReactionResults.js","metabolic-app/components/MetaboliteResults.js","metabolic-app/components/MetabolicMap.js","metabolic-app/MetabolicApp.js","serviceWorker.js","index.js"],"names":["React","createContext","ModelTable","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","editingReactionId","inputRefUpperBound","createRef","inputRefLowerBound","reaction","setState","id","lowerBound","current","value","upperBound","isNaN","Number","lower_bound","upper_bound","context","addModifReactionToScen","selScenId","getSelScen","modifReacts","removeModifReactionToScen","original","react_default","a","createElement","type","ref","defaultValue","tableScen","style","color","fontWeight","onClick","saveEditingReaction","bind","setEditingReaction","columns","Header","accessor","width","Cell","cellFunctionLowerLimit","filterable","sortable","cellFunctionUpperLimit","cellFunctionEditLimits","dataTable","modelId","baseModelId","keys","getModel","length","reactions","es","className","data","defaultPageSize","noDataText","defaultFilterMethod","filter","row","column","pivotId","undefined","String","toLowerCase","includes","Component","contextType","AppContext","ModelDescription","createNewScen","newScenId","newScenBaseModelId","newScenObjectiveId","objectiveOK","chosenScenId","e","target","loadModel","r","newScen","objective","addScen","setSelScenId","_this2","objectiveId","secondForm","formOK","objectiveStyle","backgroundColor","baseModelOptions","key","push","allModelIds","map","mapId","onChange","handleChangeScenId","handleChangeBaseModelId","handleObjectiveChange","disabled","handleSaveButton","scenOptions","allScens","scen","handleChangeCreateScen","checked","ModelTable_ModelTable","ScenElement","isSelected","removeScen","modifReactsScen","reactId","removeDiv","handleRemoveScen","textAlign","ScenOptions","allScenElements","metabolic_app_components_ScenElement","Navbar","switchButtonText","page","switchMainPage","runFVAforReaction","_x","_x2","_x3","_x4","_runFVAforReaction","apply","arguments","_callee","respfba","fractionOptimum","promises","result","result2","regenerator_default","wrap","_context","prev","next","fetch","concat","scenAsParams","then","response","json","catch","console","log","Promise","all","sent","res","counter","min","toFixed","pFBA","max","abrupt","stop","getAvailableModels","_getAvailableModels","_callee2","availableModels","_context2","getAvailableMaps","_getAvailableMaps","_callee3","availableMaps","_context3","runpFBA","_x5","_runpFBA","_callee4","addr","_context4","join","getMapFromId","_x6","_getMapFromId","_callee5","mapOut","_context5","getModelFromId","_x7","_getModelFromId","_callee6","addReactionString","modelOut","_args6","_context6","model","newReactions","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","Symbol","iterator","done","reactionString","reactionToString","err","return","reactants","products","arrow","m_id","metabolites","ReactionResults","selReactionId","fractOptimum","correctFractOpt","inputfractOptimum","dataFVA","tab","_","prevState","runFVASelReaction","apiCalls","resFVA","correct","number","content","reactionOptions","getReactionsIds","rId","getReactionFromId","name","gene_reaction_rule","components","handleReactionChange","handleChangeTab","defaultChecked","MetaboliteResults","selMetaboliteId","metabolite","structSVG","imgURL","text","getMetaboliteFromId","metaboliteOptions","getMetaboliteIds","mId","Fragment","formula","handleClickMNX","MNX","dangerouslySetInnerHTML","__html","metBal","getMetaboliteBalance","handleMetaboliteChange","MetabolicMap","selMapId","selMap","escherRef","loadEscher","reactionData","escher","never_ask_before_quit","reaction_style","reaction_scale","size","set_reaction_data","getScen","mapOptions","allMapIds","handleScenChange","handleMapChange","App","selScen","allModels","metId","thr","reactsTotalFlux","metBalAllScens","_loop","forEach","flux","Math","abs","sort","x","y","metBalR","slice","_iteratorNormalCompletion2","_didIteratorError2","_iteratorError2","_step2","_iterator2","_this3","modelIds","Array","from","Set","metabolitesModel","m","metaboliteId","_this4","metaboliteOut","_this5","reactOut","react","_this6","reactionsModel","scenId","reactionId","assign","objectSpread","s","scenOut","appContext","metabolic_app_components_Navbar","metabolic_app_components_ModelDescription","metabolic_app_components_ScenOptions","ReactionResults_ReactionResults","MetaboliteResults_MetaboliteResults","MetabolicMap_MetabolicMap","app_context","Provider","Boolean","window","location","hostname","match","ReactDOM","render","metabolic_app_MetabolicApp","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cb111c7b.chunk.js","sourcesContent":["import React from 'react';\n\nexport default React.createContext({});\n\n\n\n\n","import React, { Component } from 'react';\nimport ReactTable from 'react-table';\nimport AppContext from '../app-context';\n\nexport default class ModelTable extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      editingReactionId: '',\n    }\n    this.inputRefUpperBound = React.createRef();\n    this.inputRefLowerBound = React.createRef();\n  }\n  static contextType = AppContext;\n\n  setEditingReaction(reaction) {\n    this.setState({\n      editingReactionId: reaction.id,\n    })\n  }\n\n  saveEditingReaction(reaction) {\n    let lowerBound = this.inputRefLowerBound.current.value;\n    let upperBound = this.inputRefUpperBound.current.value;\n    if (!isNaN(lowerBound) && !isNaN(upperBound)) {\n      lowerBound = Number(lowerBound);\n      upperBound = Number(upperBound);\n      if (lowerBound !== reaction.lower_bound || upperBound !== reaction.upper_bound) {\n        this.context.addModifReactionToScen(this.context.selScenId, reaction.id, lowerBound, upperBound);\n      }\n      else if (reaction.id in this.context.getSelScen().modifReacts) {\n        this.context.removeModifReactionToScen(this.context.selScenId, reaction.id)\n      }\n    }\n    this.setState({ editingReactionId: '' });\n  }\n\n  cellFunctionLowerLimit(props) {\n    // if reaction is being edited\n    if (props.original.id === this.state.editingReactionId) {\n      return (\n        <input\n          type=\"text\"\n          ref={this.inputRefLowerBound}\n          defaultValue={props.original.lower_bound}\n        />\n      )\n    }\n    // if reaction was edited\n    else if (props.original.id in this.props.tableScen.modifReacts) {\n      return (\n        <span style={{ color: 'red', fontWeight: 'bold' }}>\n          {this.props.tableScen.modifReacts[props.original.id][0]}\n        </span>\n      )\n    }\n    // normal reaction        \n    else return props.original.lower_bound;\n  }\n\n  cellFunctionUpperLimit(props) {\n\n    // if reaction is being edited\n    if (props.original.id === this.state.editingReactionId) {\n      return (\n        <input\n          type=\"text\"\n          ref={this.inputRefUpperBound}\n          defaultValue={props.original.upper_bound}\n        />\n      )\n    }\n    // if reaction was edited\n    else if (props.original.id in this.props.tableScen.modifReacts) {\n      return (\n        <span style={{ color: 'red', fontWeight: 'bold' }}>\n          {this.props.tableScen.modifReacts[props.original.id][1]}\n        </span>\n      )\n    }\n\n    else return props.original.upper_bound;\n  }\n\n  cellFunctionEditLimits(props) {\n    if (this.context.getSelScen() === this.props.tableScen) {\n      if (props.original.id === this.state.editingReactionId) {\n        return (\n          <div\n            id=\"save-button\"\n            onClick={this.saveEditingReaction.bind(this, props.original)}\n          > Save\n          </div>\n        )\n      }\n      else {\n        return (\n          <div\n            id=\"edit-button\"\n            onClick={this.setEditingReaction.bind(this, props.original)}\n          > Edit\n              </div>\n        )\n      };\n    }\n    else return \"\"\n  }\n\n  render() {\n    // Creation of columns for table\n    const columns = [\n      {\n        Header: 'Description',\n        columns: [\n          { Header: 'ID', accessor: 'id', width: 80, style: { fontWeight: 'bold' } },\n          { Header: 'Name', accessor: 'name' },\n          { Header: 'Reaction', accessor: 'reactionString' },\n          { Header: 'Genes', accessor: 'gene_reaction_rule' },\n        ]\n      },\n      {\n        Header: 'Limits',\n        columns: [\n          {\n            Header: 'Lower', Cell: this.cellFunctionLowerLimit.bind(this), width: 50, filterable: false, sortable: false\n          },\n          {\n            Header: 'Upper', Cell: this.cellFunctionUpperLimit.bind(this), width: 50, filterable: false, sortable: false\n          },\n          {\n            Header: 'Edit', Cell: this.cellFunctionEditLimits.bind(this), filterable: false, sortable: false, width: 50\n          },\n        ]\n      }\n    ];\n    // Define data for table\n    let dataTable = [];\n    let modelId = this.props.tableScen.baseModelId\n    if (modelId !== \"noModel\" && Object.keys(this.context.getModel(modelId).length > 0)) {\n      dataTable = this.context.getModel(this.props.tableScen.baseModelId).reactions;\n    }\n\n    return (\n      <ReactTable\n        className=\"-striped -highlight\"\n        data={dataTable}\n        columns={columns}\n        filterable\n        defaultPageSize={15}\n        noDataText={\"Please Choose a Model Above\"}\n        defaultFilterMethod={(filter, row, column) => {\n          const id = filter.pivotId || filter.id;\n          return row[id] !== undefined ? String(row[id]).toLowerCase().includes(filter.value.toLowerCase()) : false;\n        }}\n      />\n    )\n  }\n}","import React, { Component } from 'react';\nimport AppContext from '../app-context';\nimport './ModelDescription.css';\nimport \"react-table/react-table.css\";\nimport ModelTable from './ModelTable';\n\n\nclass ModelDescription extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      createNewScen: true,\n      // Creation of a new scen\n      newScenId: 'New Scenario', \n      newScenBaseModelId: 'noModel',\n      newScenObjectiveId: '',\n      objectiveOK: false,\n      // Choose an existing scenario\n      chosenScenId: '',\n    }\n  }\n  static contextType = AppContext;\n\n  // **************************************\n  // Lifecycle Compontents\n  // **************************************\n\n  // **************************************\n  // Functions \n  // **************************************\n  // async changeBaseModel(modelId) {\n  //   let baseModel = await this.context.getModel(modelId);\n  //   this.setState({ chosenBaseModel: baseModel });\n  // }\n  handleChangeCreateScen(e) {\n    this.setState({createNewScen: !this.state.createNewScen});\n  }\n  handleChangeScenId(e) {\n    this.setState({newScenId: e.target.value});\n  }\n  async handleChangeBaseModelId(e) {\n    this.setState({ newScenBaseModelId: e.target.value });\n    if (e.target.value !== \"noModel\") this.context.loadModel(e.target.value);\n  }\n  handleObjectiveChange(e) {\n    let newScenObjectiveId = e.target.value;\n    let objectiveOK = false;\n    if (this.state.createNewScen && this.state.newScenBaseModelId!==\"noModel\") {\n      objectiveOK = this.context.getModel(this.state.newScenBaseModelId).reactions.filter(r => (\n        r.id === newScenObjectiveId\n      )).length > 0;\n    }\n    this.setState({ newScenObjectiveId, objectiveOK });\n  }\n  handleSaveButton() {\n    // Create new scen and add it to context.allScens\n    // set newScen as new selScen.\n    let newScen = {\n      id: this.state.newScenId,\n      modifReacts: [],\n      objective: this.state.newScenObjectiveId,\n      baseModelId: this.state.newScenBaseModelId,\n    }\n    this.context.addScen(newScen);\n    this.context.setSelScenId(this.state.newScenId);\n    this.setState({createNewScen: false});\n    // Reset state variables\n    this.setState({\n      newScenId: 'New Scenario',\n      newScenBaseModelId: 'noModel',\n      newScenObjectiveId: '',\n      objectiveOK: false,\n    })\n  }\n\n  // ***************************************\n  render() {\n    // Create scen for table\n    let tableScen={};\n    if (this.state.createNewScen) {\n      tableScen = {\n        id: this.state.newScenId,\n        baseModelId: this.state.newScenBaseModelId,\n        objectiveId: this.state.newScenObjectiveId,\n        modifReacts: [],\n      }\n    }\n    else {\n      tableScen = this.context.getSelScen();\n    }\n\n    // Submit Button active only if Base model selected and Objective ok --> verify form\n    let formOK = (this.state.objectiveOK && this.state.newScenBaseModelId !== \"noModel\");\n\n    // If Objective function does not exist, background color is red\n    let objectiveStyle = {};\n    if (!this.state.objectiveOK) objectiveStyle = { backgroundColor: '#fc9b8a' };\n\n\n    let secondForm;\n    // if create new scen --> ask for info for new scen\n    if(this.state.createNewScen) {\n      let baseModelOptions = [(\n        <option value={\"noModel\"} key=\"noModel\">Please Choose a Model</option>\n      )];      \n      baseModelOptions.push(this.context.allModelIds.map(mapId => (\n        <option key={mapId}>{mapId}</option>\n      )));\n      secondForm = (\n        <div id=\"new-scen-form\">\n          <div id=\"new-scen-form-title\">\n            Create Scenario\n          </div>\n          <label>\n            Scenario Name\n            <input\n              type=\"text\"\n              value={this.state.newScenId}\n              onChange={this.handleChangeScenId.bind(this)}\n            />\n          </label>\n          <label>\n            Base Model\n            <select\n              value={this.state.newScenBaseModelId}\n              onChange={this.handleChangeBaseModelId.bind(this)}\n            >\n              {baseModelOptions}\n            </select>\n          </label>\n          <label>\n            Objective\n            <input\n              type=\"text\"\n              value={this.state.newScenObjectiveId}\n              onChange={this.handleObjectiveChange.bind(this)}\n              style={objectiveStyle}\n            />\n          </label>\n          <button\n            disabled={!formOK}\n            onClick={this.handleSaveButton.bind(this)}\n          >\n            Save\n          </button>\n        </div>\n      );      \n    }\n    else {\n      let scenOptions = this.context.allScens.map(scen => (\n        <option key={scen.id}>{scen.id}</option>\n      ))\n      secondForm = (\n        <label>\n          Choose Scenario:\n          <select\n            value={this.context.selScenId}\n            onChange={e => this.context.setSelScenId(e.target.value)}\n          >\n            {scenOptions}\n          </select>\n        </label>\n      )\n    }\n\n    return (\n      <div id=\"ModelDescription\">\n        <div id=\"ModelForm\">\n          <label>\n            Create new Scenario ?\n            <input \n              type=\"checkbox\"\n              value={this.state.createNewScen}\n              onChange={this.handleChangeCreateScen.bind(this)}\n              checked={this.state.createNewScen}\n            />\n          </label>\n          {secondForm}\n        </div>\n\n        <div id=\"model-table\">\n          <ModelTable \n            tableScen={tableScen}\n          />\n        </div>\n      </div>\n    );\n\n  }\n}\n\nexport default ModelDescription;","import React, { Component } from \"react\";\nimport \"./ScenElement.css\";\nimport AppContext from \"../app-context\";\nimport PT from \"prop-types\";\n\nclass ScenElement extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isSelected: true\n    }\n  }\n  static contextType = AppContext;\n\n  static propTypes = {\n    scen: PT.object.isRequired,\n  }\n\n  handleChangeSelected() {\n    this.setState(state => {\n      return {isSelected: !state.isSelected }\n    });\n  }\n  handleRemoveScen() {\n    this.context.removeScen(this.props.scen);\n  }\n\n  render() {\n    // modified reactions\n    let modifReactsScen = Object.keys(this.props.scen.modifReacts).map(reactId => (\n      <li key={reactId}>\n        {reactId}: {this.props.scen.modifReacts[reactId][0]} ==> {this.props.scen.modifReacts[reactId][1]}\n      </li>\n    ));\n\n    // Remove scen only if more than one scen in allscens\n    let removeDiv = <div></div>\n    if (this.context.allScens.length>1) {\n      removeDiv = (\n        <div id=\"scen-element-remove\" onClick={this.handleRemoveScen.bind(this)}>\n            X\n        </div>\n      )\n    }\n    \n    return (\n      <div id=\"ScenElement\">\n        <div id=\"scen-element-first-row\">\n          <div id=\"scen-element-title\">\n            {this.props.scen.id}\n          </div>\n          {removeDiv}\n        </div>\n        <div id=\"scen-element-second-row\">        \n          <div id=\"scen-element-model\">\n            <span style={{fontWeight:\"bold\"}}>Model:</span> {this.props.scen.baseModelId}\n          </div>\n          <div id=\"scen-element-objective\">\n          <span style={{fontWeight:\"bold\"}}>Objective:</span> {this.props.scen.objective}\n          </div>\n        </div>\n        <div id=\"scen-element-reactions\">\n          <span style={{textAlign:\"center\", fontWeight:\"bold\"}}>Modified Reactions:</span>\n          {modifReactsScen}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ScenElement;","import React, { Component } from 'react';\nimport './ScenOptions.css';\nimport AppContext from '../app-context';\nimport ScenElement from './ScenElement';\n\nclass ScenOptions extends Component {\n  static contextType = AppContext;\n\n  render() {\n    // Create Scen Elements\n    let allScenElements = this.context.allScens.map(scen => (\n      <ScenElement\n        key={scen.id}\n        scen={scen}\n      />\n    ))\n\n    return (\n      <div id=\"ScenOptions\">\n      <div id=\"scen-options-title\">\n        List Scenarios\n      </div>\n        <div id=\"scen-options-elements\">\n          {allScenElements}\n        </div>\n      </div>\n    );\n  }\n}\n\n  export default ScenOptions;","import React, { Component } from 'react';\nimport './Navbar.css';\nimport AppContext from '../app-context';\n\nclass Navbar extends Component {\n  static contextType = AppContext;\n\n  render() {\n    // switchButtonText\n    let switchButtonText;\n    if (this.context.page==='options') {\n      switchButtonText = 'Run Model'\n    }\n    else {\n      switchButtonText = 'Options'\n    }\n  \n    return(\n      <div id=\"Navbar\">\n        <div id=\"Navbar-switch-button\">\n          <button \n            onClick={this.context.switchMainPage} \n            disabled={this.context.allScens.length===0}>\n            {switchButtonText}\n          </button>\n        </div>\n        <div id=\"Navbar-title\">\n          Metabolic Modelling\n        </div>\n        <div id=\"Navbar-empty\">\n  \n        </div>\n      </div>\n    )\n\n  }\n\n}\n\nexport default Navbar;\n\n","\n// Runs FVA for a specific reaction given a list of scenarios\nexport async function runFVAforReaction(reactId, allScens, respfba, fractionOptimum) {\n  let promises = allScens.map((scen) => (\n    fetch(`metabolic/run_fva/?${scenAsParams(scen)}&reactId=${reactId}&fractionOpt=${fractionOptimum}`)\n      .then(response=>response.json())\n      .catch(response=>console.log(response))\n    ));\n  let result = await Promise.all(promises)\n\n  let result2 = result.map((res,counter) => (\n    {\n      scen: allScens[counter].id, \n      min: res.min.toFixed(3)|| 0, \n      pFBA: (respfba[allScens[counter].id][reactId] || 0).toFixed(3),\n      max: res.max.toFixed(3)|| 0,\n    }\n  ));\n\n  return result2;\n}\n\n// Get available maps and models\nexport async function getAvailableModels() {\n  let availableModels = await fetch('metabolic/see_available_models')\n      .then(response => response.json())\n      .catch(response => console.log(response))\n  return availableModels;\n}\nexport async function getAvailableMaps() {\n  let availableMaps = await fetch('metabolic/see_available_maps')\n      .then(response => response.json())\n      .catch(response => console.log(response))\n  return availableMaps;\n}\n\n// Run pfba and returns result\nexport async function runpFBA(scen) {\n  let addr = `metabolic/run_pfba/?${scenAsParams(scen)}`\n  let res = await fetch(addr).then(response=>response.json())\n  return res;\n}\n\n// Converts scen into parameter for API\nfunction scenAsParams(scen) {\n  let addr = `baseModelId=${scen.baseModelId}&objective=${scen.objective}`\n  if (Object.keys(scen.modifReacts).length>0) {\n    let modifReacts = Object.keys(scen.modifReacts).map(reactId => (\n      reactId+'/'+scen.modifReacts[reactId].join('/')\n    )).join(',');\n    addr += `&modifReacts=${modifReacts}`;\n  }\n  return addr;\n}\n\nexport async function getMapFromId(mapId) {\n  let mapOut = await fetch(`metabolic/get_map/?id=${mapId}`)\n    .then(response => response.json())\n    .catch(response => console.log(response));\n  return mapOut;\n}\n\nexport async function getModelFromId(modelId,addReactionString=false) {\n  let modelOut = await fetch(`metabolic/get_model/?id=${modelId}`)\n    .then(response => response.json())\n    .then(model => {\n      if (addReactionString) {\n        let newReactions = [];\n        for (let reaction of model.reactions) {\n          reaction.reactionString = reactionToString(reaction);\n          newReactions.push(reaction);\n        }\n        model.reactions = newReactions;\n      }\n      return model\n    });\n  return modelOut;  \n}\n\nfunction reactionToString(reaction) {\n  let reactants=[], products=[], arrow='', out='';\n  for (let m_id in reaction.metabolites) {\n    if(reaction.metabolites[m_id]===1) products.push(m_id);\n    else if (reaction.metabolites[m_id]>0) products.push(reaction.metabolites[m_id]+'*'+m_id);\n    else if (reaction.metabolites[m_id]===-1) reactants.push(m_id);\n    else reactants.push((-1*reaction.metabolites[m_id])+'*'+m_id);\n  }\n  if (reaction.lower_bound<0 && reaction.upper_bound>0) arrow = '<==>';\n  else if (reaction.lower_bound>=0 && reaction.upper_bound>0) arrow = '-->';\n  else if (reaction.lower_bound < 0 && reaction.upper_bound<=0) arrow = '<--'\n  else arrow = '=!=';\n  out = `${reactants.join(' + ')} ${arrow} ${products.join(' + ')}`;\n  // console.log(reaction.id, out);\n  return out;\n}\n\n","import React, { Component } from 'react';\nimport './ReactionResults.css';\nimport AppContext from '../app-context';\nimport * as apiCalls from '../api-calls';\nimport { JsonToTable } from 'react-json-to-table';\n\nexport default class ReactionResults extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selReactionId: 'None',\n      fractOptimum: 0.9,\n      correctFractOpt: true,\n      inputfractOptimum: '0.9',\n      dataFVA: {},\n      tab: 'info', //can be either info or FVA\n    }\n  }\n  static contextType = AppContext;\n\n\n  async componentDidUpdate(_,prevState) {\n    if (prevState.selReactionId !== this.state.selReactionId && this.state.selReactionId !== \"None\") {\n      this.runFVASelReaction();\n    }\n  }\n  \n  async runFVASelReaction() {\n    let resFVA = await apiCalls.runFVAforReaction(\n      this.state.selReactionId, \n      this.context.allScens,\n      this.context.respfba,\n      1);    \n    this.setState({dataFVA: resFVA})\n\n  }\n\n  validateFractOpt(e) {\n    // verify if input is correct\n    this.setState({inputfractOptimum: e.target.value});\n    let correct = !isNaN(e.target.value);\n    if(correct) {\n      let number = Number(e.target.value);\n      correct = correct && number>0 && number <=1;\n      if(correct) this.setState({fractOptimum: number});\n    }\n    this.setState({correctFractOpt: correct});\n  }\n\n  handleReactionChange(e) {\n    this.setState({selReactionId: e.target.value, dataFVA: {}});    \n  }\n\n  handleChangeTab(e) {\n    this.setState({tab: e.target.value});\n  }\n\n  render() {\n    // Creation of reaction options\n    let reactionsList = ['None'].concat(this.context.getReactionsIds());\n    let reactionOptions = reactionsList.map(rId => (\n      <option key={rId}>{rId}</option>\n    ));\n\n    // red background if fract optimum not valid\n    // let styleInput = {}\n    // if (!this.state.correctFractOpt) styleInput = {backgroundColor: 'LightCoral'}\n\n    // Reaction\n    let reaction = this.context.getReactionFromId(this.state.selReactionId);\n\n    // definition of main content depending on page\n    let content;\n    if (this.state.tab === \"info\") {\n      content = (\n        <div id=\"reaction-infos-table\">\n          <table>\n            <tbody>\n              <tr>\n                <th>Name:</th>\n                <td>{reaction.name}</td>\n              </tr>\n              <tr>\n                <th>Bounds:</th>\n                <td>{reaction.lower_bound} / {reaction.upper_bound}</td>\n              </tr>\n              <tr>\n                <th>Genes:</th>\n                <td>{reaction.gene_reaction_rule}</td>\n              </tr>\n              <tr>\n                <th>Reaction:</th>\n                <td>{reaction.reactionString}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n      );\n    }\n    else if (this.state.tab === \"FVA\") {\n      \n      content = (\n        <div id='reaction-json-table'>\n          <JsonToTable json={this.state.dataFVA} id=\"reaction-json-table\" />\n        </div>\n      )\n    }\n\n    return (\n      <div id=\"ReactionResults\">\n        <div id=\"reaction-results-title\">\n          Reactions Analysis\n        </div>\n        <div id=\"reaction-results-form\">\n          <label>\n            Reaction? \n            <select \n              value={this.state.selReactionId}\n              onChange={this.handleReactionChange.bind(this)}\n            >{reactionOptions}\n            </select>\n          </label>\n          {/* <label>\n            Fraction of Optimum:\n            <input\n              type=\"text\"\n              value={this.state.inputfractOptimum} \n              onChange={this.validateFractOpt.bind(this)}\n              style={styleInput}\n            />\n          </label> */}\n        </div>\n        <div id=\"reaction-results-radio\" onChange={this.handleChangeTab.bind(this)}>\n          <input type=\"radio\" value=\"info\" name=\"radio\" defaultChecked={true}/> Infos\n          <input type=\"radio\" value=\"FVA\" name=\"radio\"/> FVA\n        </div>\n        <div id=\"reaction-results-infos\">\n          {content}\n        </div>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport './MetaboliteResults.css';\nimport AppContext from '../app-context';\nimport { JsonToTable } from \"react-json-to-table\";\n\nexport default class MetaboliteResults extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selMetaboliteId: 'None',\n      tab: 'info', // can be either info or balance\n      metabolite: {},\n      structSVG: '',\n    }\n  }\n  static contextType = AppContext;\n\n  async componentDidUpdate(_,prevState) {\n    // get structure image as svg\n    let metChanged = this.state.selMetaboliteId !== prevState.selMetaboliteId;\n    if (metChanged && this.state.metabolite !== {}) {\n      let imgURL = `chemo/get_svg_metabolite/${this.state.metabolite.id}`;\n      let structSVG;\n      if (this.state.selMetaboliteId === 'None') structSVG = '';\n      else structSVG = await fetch(imgURL).then(response=>response.text());\n      this.setState({structSVG});\n    }\n  \n  }\n\n  handleChangeTab(e) {\n    this.setState({tab: e.target.value});\n  }\n\n  // handleClickMNX(mnx_id) {\n  //   window.open(\"http://www.metanetx.org/chem_info/\"+mnx_id, '_blank');\n  // }\n\n  handleMetaboliteChange(e) {\n    let m_id = e.target.value;\n    if (m_id === \"None\") this.setState({metabolite: {}, structSVG: ''})\n    else {\n      this.setState({selMetaboliteId: m_id, \n        metabolite: this.context.getMetaboliteFromId(m_id)});\n    }\n\n  }\n\n  \n  render() {\n    // Creation of metabolite options\n    let metaboliteList = ['None'].concat(this.context.getMetaboliteIds());\n    let metaboliteOptions = metaboliteList.map(mId => (\n      <option key={mId}>{mId}</option>\n    ));\n\n    // Definition of main content depending on page\n    let content;\n    if (this.state.tab === 'info') {\n      content = (\n        <>\n        <div id=\"metabolite-infos-table\">\n          <table>\n            <tbody>\n              <tr>\n                <th>Name:</th>\n                <td>{this.state.metabolite.name}</td>\n              </tr>\n              <tr>\n                <th>Formula:</th>\n                <td>{this.state.metabolite.formula}</td>\n              </tr>\n              <tr>\n                <th>Structure:</th>\n                <td onClick={_ => this.handleClickMNX(this.state.metabolite.MNX)}>{this.state.metabolite.MNX}</td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        <div id=\"metabolite-structure\" dangerouslySetInnerHTML={{__html: this.state.structSVG}} />\n        </>\n      );\n    }\n    else if (this.state.tab === 'balance') {\n      let metBal = {};\n      if (this.state.selMetaboliteId!==\"None\") {\n        metBal = this.context.getMetaboliteBalance(this.state.selMetaboliteId,0);\n      }\n      \n      content = (\n        <JsonToTable json={metBal} key=\"json-table\" id=\"metabolite-json-table\"/>\n      );\n    }\n    \n      \n    \n\n    \n\n    return (\n      <div id=\"MetaboliteResults\">\n        <div id=\"metabolite-results-title\">\n          Metabolite Analysis\n        </div>\n        <div id=\"metabolite-results-form\">\n          <label>\n            Metabolite? :\n            <select\n              value={this.state.selMetaboliteId}\n              onChange={this.handleMetaboliteChange.bind(this)}\n            > {metaboliteOptions}\n            </select>\n          </label>\n        </div>\n        <div id=\"metabolite-results-radio\" onChange={this.handleChangeTab.bind(this)}>\n          <input type=\"radio\" value=\"info\" name=\"metabolite-radio\" defaultChecked={true}/> Infos\n          {/* <input type=\"radio\" value=\"structure\" name=\"metabolite-radio\" /> Structure */}\n          <input type=\"radio\" value=\"balance\" name=\"metabolite-radio\"/> Balance\n        </div>\n        <div id=\"metabolite-results-content\">\n          {content}\n        </div>\n        \n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport './MetabolicMap.css';\nimport AppContext from '../app-context';\nimport * as apiCalls from '../api-calls';\nimport * as escher from 'escher-vis';\nimport './builder.css';\n// import escher from './escher';\n\nexport default class MetabolicMap extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      selMapId: 'None',\n      selMap: null,\n    }\n    this.escherRef = React.createRef();\n  } \n  static contextType = AppContext;\n\n  componentDidMount() {\n    this.loadEscher();\n  }\n\n  componentDidUpdate(_, prevState) {\n    // let mapChanged = this.state.selMapId !== prevState.selMapId;\n    // if (mapChanged) {\n      this.loadEscher();\n    // }\n  } \n\n  loadEscher() {\n    // Model\n    let scen = this.context.getSelScen();\n    let model = this.context.getModel(scen.baseModelId);\n\n    // Create dictionary with data for escher\n    let reactionData = {}\n    for (let reaction of model.reactions) {\n      if (reaction.id in this.context.respfba[this.context.selScenId]) {\n        reactionData[reaction.id] = this.context.respfba[this.context.selScenId][reaction.id];\n      }\n      else {\n        reactionData[reaction.id] = 0;\n      }\n    }\n\n    let escherOptions = {\n      never_ask_before_quit: true,\n      reaction_style: ['color', 'size', 'text', 'abs'],\n      reaction_scale: [\n        {type:'min', color:'#c8c8c8', size:12},\n        {type:'max', color:'#66176d', size:20}\n      ]\n    };\n\n    if (this.escherRef.current !== null) {\n      // Create escher builder\n      let escherBuilder = escher.Builder(\n        this.state.selMap, // map_data\n        model, // model_data\n        null, // embedded_css\n        this.escherRef.current, // selection\n        escherOptions, // options\n      );\n\n      escherBuilder.set_reaction_data([reactionData])\n\n    }\n  }\n\n\n  async handleMapChange(e) {\n    let selMapId = e.target.value\n    let selMap = {}\n    if (selMapId!==\"None\"){\n      selMap = await apiCalls.getMapFromId(selMapId);\n      \n    }\n    else selMap = null;\n    this.setState({selMapId, selMap});\n  }\n\n  handleScenChange(e) {\n    let scen = this.context.getScen(e.target.value);\n    this.context.setSelScenId(scen.id);\n  }\n  \n  render() {\n    // Define select menu for map selection\n    let mapOptions = [(\n      <option key={'None'} value=\"None\">No map</option>\n    )];\n    mapOptions.push(this.context.allMapIds.map(mapId => (\n      <option key={mapId}>{mapId}</option>\n    )));\n\n    // Define options for scenarios\n    let scenOptions = this.context.allScens.map(scen => (\n      <option key={scen.id}>{scen.id}</option>\n    ));\n\n    return (\n      <div id=\"MetabolicMap\">\n        <div id=\"metabolic-map-form\">\n          <label>\n            Choose Scenario:\n            <select\n              value={this.context.selScenId}\n              onChange={this.handleScenChange.bind(this)}\n            >\n              {scenOptions}\n            </select>\n          </label>\n          <label>\n            Please select a map: \n            <select\n              onChange={this.handleMapChange.bind(this)}\n            >\n              {mapOptions}\n            </select>\n          </label>\n        </div>\n        <div id=\"metabolic-map-escher\" ref={this.escherRef}>\n          Metabolic Map\n        </div>\n      </div>\n    );\n  }\n}","import React, { Component } from 'react';\nimport './MetabolicApp.css';\nimport AppContext from './app-context';\nimport ModelDescription from './components/ModelDescription';\nimport ScenOptions from './components/ScenOptions';\nimport Navbar from './components/Navbar'\nimport ReactionResults from './components/ReactionResults'\nimport MetaboliteResults from './components/MetaboliteResults'\nimport MetabolicMap from './components/MetabolicMap'\nimport * as apiCalls from './api-calls';\nimport './components/slack.css';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      allModelIds: [], // Ids of available models\n      allMapIds: [],\n      allScens: [], // All defined scenarios\n      selScenId: '', // selected scenario for plot with escher\n      page: 'options', //can be options or results\n      allModels: [], // All downloaded models\n      respfba:{}, // scen -> object with keys reactions and values object with reactions->flux\n    };    \n    // Definition of functions to manage context\n  }\n\n  async componentDidMount() {\n    let allModelIds = await apiCalls.getAvailableModels();\n    let allMapIds = await apiCalls.getAvailableMaps();\n    this.setState({allModelIds, allMapIds});\n  }\n\n  // thr --> sum of absolute values to keep. To be implemented.\n  getMetaboliteBalance(metId, thr) {\n    // metBalAllScens ==> list of objects, each for one scen, containing scenId and all reactions\n    let reactsTotalFlux = {};\n    let metBalAllScens = {};\n    for (let scen of this.state.allScens) {\n      metBalAllScens[scen.id] = {};\n      let model = this.getModel(scen.baseModelId);\n      model.reactions.forEach(r => {\n        if (metId in r.metabolites && r.id in this.state.respfba[scen.id]) {\n          let flux = r.metabolites[metId]*this.state.respfba[scen.id][r.id];\n          metBalAllScens[scen.id][r.id] = +flux.toFixed(2);\n          // add this reaction to reactsTotalFlux\n          if (r.id in reactsTotalFlux) reactsTotalFlux[r.id] += Math.abs(metBalAllScens[scen.id][r.id]);\n          else reactsTotalFlux[r.id] = Math.abs(metBalAllScens[scen.id][r.id]);          \n        }\n      });\n    }\n\n    // console.log('metBalAllScens', metBalAllScens);\n\n    // Select reactions ok\n    let reactsOK = Object.keys(reactsTotalFlux).sort((x,y)=>reactsTotalFlux[y]-reactsTotalFlux[x]).filter(rId => (\n      (reactsTotalFlux[rId]>=thr)\n    ));\n\n    // metBalReacts ==> list of objects, one for reaction, if sum abs >= thr\n    let metBalReacts = reactsOK.map(rId => {\n      let reaction = (rId.length<20 ? rId : rId.slice(0,20)+'...')\n      let metBalR = {reaction}\n      for (let scen of this.state.allScens) {\n        if (rId in metBalAllScens[scen.id]) metBalR[scen.id] = metBalAllScens[scen.id][rId];\n        else metBalR[scen.id] = 0;\n      }\n      return metBalR;\n    })\n\n    return metBalReacts;\n\n    // return metaboliteBalance;\n  }\n\n  // Returns sorted list of metabolites in current models\n  getMetaboliteIds() {\n    let modelIds = this.state.allScens.map(scen=>scen.baseModelId);\n    modelIds = Array.from(new Set(modelIds));\n    let metabolites = [];\n    modelIds.forEach(modelId => {\n      let model = this.getModel(modelId)\n      let metabolitesModel = model.metabolites.map(m=>m.id);\n      metabolites = metabolites.concat(metabolitesModel);\n    });\n    metabolites = Array.from(new Set(metabolites));\n    metabolites.sort();\n    return metabolites;\n  }\n\n  // Returns a metabolite object from the first occurence\n  getMetaboliteFromId(metaboliteId) {\n    let modelIds = this.state.allScens.map(scen=>scen.baseModelId);\n    modelIds = Array.from(new Set(modelIds));\n    let metaboliteOut = {};\n    modelIds.forEach(modelId => {\n      let model = this.getModel(modelId);\n      let metabolite = model.metabolites.filter(m=>m.id===metaboliteId);\n      if (metabolite.length>0) metaboliteOut = metabolite[0];\n    });\n    return metaboliteOut\n  }\n\n  // Returns a reaction object from the first occurence\n  getReactionFromId(reactId) {\n    let modelIds = this.state.allScens.map(scen=>scen.baseModelId);\n    modelIds = Array.from(new Set(modelIds));\n    let reactOut = {};\n    modelIds.forEach(modelId => {\n      let model = this.getModel(modelId);\n      let react = model.reactions.filter(r=>r.id===reactId);\n      if (react.length>0) reactOut = react[0];\n    });\n    return reactOut;\n  }\n\n  // Returns sorted list of reactions in current models\n  getReactionsIds() {\n    let modelIds = this.state.allScens.map(scen=>scen.baseModelId);\n    modelIds = Array.from(new Set(modelIds));\n    let reactions = [];\n    modelIds.forEach(modelId => {\n      let model = this.getModel(modelId)\n      let reactionsModel = model.reactions.map(r=>r.id);\n      reactions = reactions.concat(reactionsModel);\n    });\n    reactions = Array.from(new Set(reactions));\n    reactions.sort();\n    return reactions;\n  }\n\n  setSelScenId = (selScenId) => {\n    this.setState({ selScenId });\n  }\n  getSelScen = () => {\n    if (this.state.selScenId !== '') return this.state.allScens.filter(scen=>scen.id===this.state.selScenId)[0];\n    else return {};\n  }\n  addModifReactionToScen(scenId,reactionId, lowerBound, upperBound) {\n    let scen = Object.assign({},this.state.allScens.filter(scen=>scen.id===scenId)[0]);\n    scen.modifReacts = {...scen.modifReacts }\n    scen.modifReacts[reactionId] = [lowerBound,upperBound];\n    let allScens = this.state.allScens.map(s => {\n      if(s.id===scen.id) return scen;\n      else return s;\n    })\n    this.setState({allScens});\n  }\n  removeModifReactionToScen(scenId,reactionId) {\n    let scen = Object.assign({},this.state.allScens.filter(scen=>scen.id===scenId)[0]);\n    scen.modifReacts = {...scen.modifReacts }\n    delete scen.modifReacts[reactionId]\n    let allScens = this.state.allScens.map(s => {\n      if(s.id===scen.id) return scen;\n      else return s;\n    })\n    this.setState({allScens});\n  }\n  addScen = (selScen) => {\n    this.setState(state => ({ allScens: state.allScens.filter(scen=>scen.id!==selScen.id).concat([selScen]) }))\n  }\n  removeScen = (selScen) => {\n    this.setState(state => ({ allScens: state.allScens.filter(scen=>scen.id !== selScen.id) }))\n  }\n  // returns model if it is already stored\n  getModel (modelId) {\n    let modelOut = this.state.allModels.filter(model=>model.id===modelId);\n    if (modelOut.length>0) return modelOut[0];\n    else return {}\n  }\n  getScen (scenId) {\n    let scenOut = this.state.allScens.filter(scen=>scen.id===scenId);\n    if (scenOut.length>0) return scenOut[0];\n    else return {}\n  }\n  // Loads model if not already in allModels\n  async loadModel(modelId) {\n    if (!(modelId in this.state.allModels)) {\n      let model = await apiCalls.getModelFromId(modelId,true);\n      let allModels = this.state.allModels.filter(model=>model.id!==modelId).concat([model]) \n      this.setState({allModels});      \n    }\n  }\n  // Switches page options vs results\n  async switchMainPage() {\n    if (this.state.page === 'options') {\n      // change page\n      this.setState({page: 'results'})\n      // run model\n      let respfba = {};\n      for (let scen of this.state.allScens) {\n        let res = await apiCalls.runpFBA(scen);\n        respfba[scen.id] = res;\n      }\n      this.setState({respfba});\n    }\n    else {\n      this.setState({page: 'options', respfba:{}});\n    }\n  }  \n  \n\n  render() {\n    // Definition of context for provider\n    let appContext = {\n      ...this.state,\n      //variables\n      allModels: this.state.allModels,\n      //functions\n      loadModel: this.loadModel.bind(this),\n      setSelScenId: this.setSelScenId.bind(this),\n      getSelScen: this.getSelScen.bind(this),\n      addScen: this.addScen.bind(this),\n      removeScen: this.removeScen.bind(this),\n      getModel: this.getModel.bind(this),\n      addModifReactionToScen: this.addModifReactionToScen.bind(this),\n      removeModifReactionToScen: this.removeModifReactionToScen.bind(this),\n      switchMainPage: this.switchMainPage.bind(this),\n      getScen: this.getScen.bind(this),\n      getReactionsIds: this.getReactionsIds.bind(this),\n      getReactionFromId: this.getReactionFromId.bind(this),\n      getMetaboliteIds: this.getMetaboliteIds.bind(this),\n      getMetaboliteFromId: this.getMetaboliteFromId.bind(this),\n      getMetaboliteBalance: this.getMetaboliteBalance.bind(this),\n    }\n\n    // Definition of main content\n    let content;\n    if (this.state.page === 'options') {\n      content = (\n        <div id=\"App\">\n          <Navbar />\n          <div id=\"App-content\">\n            <ModelDescription />\n            <ScenOptions />\n          </div>\n        </div>\n      );\n    }\n    \n    else if (this.state.page==='results' && Object.keys(this.state.respfba).length===0) {\n      content = (\n        <div id=\"App\">\n          <Navbar />\n          <div id=\"App-content\">\n            <div className=\"slack\">\n              <span className=\"slack-dot slack-dot--a\"></span>\n              <span className=\"slack-dot slack-dot--b\"></span>\n              <span className=\"slack-dot slack-dot--c\"></span>\n              <span className=\"slack-dot slack-dot--d\"></span>\n            </div>            \n          </div>\n        </div>\n      );\n    }\n    \n    else if (this.state.page==='results' && Object.keys(this.state.respfba).length===this.state.allScens.length) {\n      content = (\n        <div id=\"App\">\n          <Navbar />\n          <div id=\"App-content\">\n            <div id=\"results-left\">\n              <ReactionResults />\n              <MetaboliteResults />\n            </div>\n            <MetabolicMap />\n          </div>\n        </div>\n      );\n    }\n\n    // For debug !!\n    // content = <ReactionResults />\n    \n\n    return (\n      <AppContext.Provider value={appContext}>\n        {content}\n      </AppContext.Provider >\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport MetabolicApp from './metabolic-app/MetabolicApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<MetabolicApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}